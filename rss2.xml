<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>oing9179 的笔记本儿</title>
    <link>https://oing9179.github.io/blog/</link>
    <atom:link href="/blog/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>Develop with pleasure!</description>
    <pubDate>Thu, 04 May 2017 14:31:44 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>日记 - python-pytun scapy / Depression</title>
      <link>https://oing9179.github.io/blog/2017/05/Diary-Depression-pytun/</link>
      <guid>https://oing9179.github.io/blog/2017/05/Diary-Depression-pytun/</guid>
      <pubDate>Thu, 04 May 2017 13:33:47 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h1&gt;&lt;p&gt;好几天没写博客了，今天睡前写一篇糊弄一下吧。内容主要有2：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用 python-pytun 和 scapy 试着弄个包转发工具&lt;/li&gt;
&lt;li&gt;Depression 与自我恢复&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <comments>https://oing9179.github.io/blog/2017/05/Diary-Depression-pytun/#disqus_thread</comments>
    </item>
    
    <item>
      <title>SysRq 键 - Linux 系统崩掉前最后的救命稻草</title>
      <link>https://oing9179.github.io/blog/2017/04/The-Magic-SysRq-Key/</link>
      <guid>https://oing9179.github.io/blog/2017/04/The-Magic-SysRq-Key/</guid>
      <pubDate>Thu, 20 Apr 2017 04:24:48 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h1&gt;&lt;p&gt;今天看英语语法的时候 随意的看了一眼键盘，意外的发现 除了 &lt;code&gt;pause&lt;/code&gt; &lt;code&gt;break&lt;/code&gt; 和 &lt;code&gt;scroll&lt;/code&gt; 这几个键以外，还有个 &lt;code&gt;SysRq&lt;/code&gt;。然后查了一下，发现这个键在 Linux 下大有用途：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In Linux, the kernel can be configured to provide functions for system debugging and crash recovery. This use is known as the “Magic SysRq key”.&lt;br&gt;在 Linux 下，通过对内核进行配置 可以让它来提供一些功能，比如调试操作系统以及崩溃恢复（Crash Recovery）。这种 SysRq 用法被称之为 “Magic SysRq key”。&lt;br&gt;- &lt;a href=&quot;https://en.wikipedia.org/wiki/System_request#Modern_uses&quot;&gt;System request - wikipedia.org&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当 Linux 系统崩溃但还没到 kernel panic 的地步的时候（比如 CPU soft lockup），就可以使用这棵最后的救命稻草。下面我就来介绍一下 SysRq 的使用方法。&lt;br&gt;
      
      </description>
      
      <comments>https://oing9179.github.io/blog/2017/04/The-Magic-SysRq-Key/#disqus_thread</comments>
    </item>
    
    <item>
      <title>用 Docker &amp; Nginx 搭建自己的账本（Firefly）</title>
      <link>https://oing9179.github.io/blog/2017/04/Setup-Firefly-the-Financial-Manager-using-Docker-Nginx/</link>
      <guid>https://oing9179.github.io/blog/2017/04/Setup-Firefly-the-Financial-Manager-using-Docker-Nginx/</guid>
      <pubDate>Mon, 17 Apr 2017 23:47:03 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h1&gt;&lt;p&gt;“我辛辛苦苦挣的钱都去哪儿了”，我可不希望以后什么什么时候开始说这种话，于是 搭建个记账软件来记录自己的收支吧。&lt;br&gt;该软件优点如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;资金流向：比如钱都花在哪些类目上了，钱都流向哪些商家了。&lt;/li&gt;
&lt;li&gt;资金预算：比如打算每个月花多少钱在饮食上。&lt;/li&gt;
&lt;li&gt;分类 &amp;amp; 标签：比如钱都花在那些类目上了。&lt;/li&gt;
&lt;li&gt;交易记录：除了收入和支出记录外，如有多个银行账户的话 还能记录不同账户之间的转帐交易&lt;/li&gt;
&lt;li&gt;存钱罐（Piggy Banks）：比如想买个手机但是目前没有那么多预算，可以先弄个存钱罐，然后一点一点的往里面存。相当于一个长远的资金预算。&lt;/li&gt;
&lt;li&gt;账单：每月水电费之类的。&lt;/li&gt;
&lt;li&gt;规则：比如填写支出描述时自动填写预设的支出金额。&lt;/li&gt;
&lt;li&gt;报表（Reports）：按月、季、年生成报表，账户余额、资金流向、短期/长期预算、账单 等等。&lt;/li&gt;
&lt;li&gt;多货币：软妹币, 美刀, 英镑, 比特币，想用什么就用什么（不支持货币换算，在创建收支记录时候可以手动填写换算前后的金额）。&lt;/li&gt;
&lt;li&gt;数据导入导出：导入导出 &lt;code&gt;csv&lt;/code&gt; 格式的文件，进一步对资金流向做分析什么的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;目前我能想到的唯一缺点就是：没能和各种银行/支付机构（比如支付婊）进行接口对接，实现自动记录收入支出。&lt;br&gt;另外，该软件作者表示 “不支持自动支付重复性交易”，原因是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I believe that if you are serious about changing your financial habits, you should be aware of what happens on your accounts. The money you spend and the money you earn. By entering each transaction manually, you will &lt;em&gt;feel&lt;/em&gt; what you spend.&lt;br&gt;我认为如果你真的想改变你的财务习惯的话，你应该更关心你的账户，你花的钱还有你挣的钱。通过手动地录入每次交易，让你&lt;em&gt;切实体会到&lt;/em&gt;钱都花在哪里了。&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <comments>https://oing9179.github.io/blog/2017/04/Setup-Firefly-the-Financial-Manager-using-Docker-Nginx/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Java 并发 &amp; 多线程 - 基础知识</title>
      <link>https://oing9179.github.io/blog/2017/04/Java-Concurrency-Multi-Threading-Introduction/</link>
      <guid>https://oing9179.github.io/blog/2017/04/Java-Concurrency-Multi-Threading-Introduction/</guid>
      <pubDate>Thu, 13 Apr 2017 01:21:06 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h1&gt;&lt;p&gt;终于，今天终于有底气来谈论这个经常被各种面试官提及的话题了。&lt;br&gt;本文将涵盖目前入门 Java 并发 &amp;amp; 并行编程的基本理论知识。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我（面试的时候）几乎场场都面多线程，我都说我不太懂。（感觉面试官在）传达给我一层意思：（学）Java（却）不懂多线程等于我没学 Java。&lt;br&gt;- 某位不愿意透露姓名的人（不是我）&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <comments>https://oing9179.github.io/blog/2017/04/Java-Concurrency-Multi-Threading-Introduction/#disqus_thread</comments>
    </item>
    
    <item>
      <title>我不知道的JS</title>
      <link>https://oing9179.github.io/blog/2017/04/I-dont-know-JS/</link>
      <guid>https://oing9179.github.io/blog/2017/04/I-dont-know-JS/</guid>
      <pubDate>Mon, 10 Apr 2017 07:05:39 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;《你不知道的JS》 (You don’t know JS) 读书笔记&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h1&gt;&lt;p&gt;一直以为 JavaScript 就是 Script 版的 Java，但在看了这本书后才知道，它丫的就是个 Script，跟 Java 一点儿关系都没有。&lt;br&gt;JS 有一些 Java 没有的特性，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;拿 &lt;code&gt;function&lt;/code&gt; 当对象用（看过书后发现 &lt;code&gt;function&lt;/code&gt; 真的是个对象）&lt;/li&gt;
&lt;li&gt;除了 &lt;code&gt;null&lt;/code&gt; 还有 &lt;code&gt;undefined&lt;/code&gt; 还有 &lt;code&gt;undecleared&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;var&lt;/code&gt; 定义的变量的作用域不符合常理（至少我觉得跟 Java 里定义出来的变量的作用域不一样）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;this&lt;/code&gt; is not this.&lt;/li&gt;
&lt;li&gt;“半残”的面向对象概念&lt;/li&gt;
&lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我本来还想指望看完这系列书后能对 JS 的刻板印象有所改观，然而事与愿违。&lt;br&gt;下面我将以一个水平不及初级Lava程序员的程序员的角度，为本书做一份笔记。&lt;br&gt;
      
      </description>
      
      <comments>https://oing9179.github.io/blog/2017/04/I-dont-know-JS/#disqus_thread</comments>
    </item>
    
    <item>
      <title>用 Docker 和 Nginx 搭建自己的云服务器（Nextcloud）</title>
      <link>https://oing9179.github.io/blog/2017/03/Setup-Nextcloud-using-Docker-and-Nginx/</link>
      <guid>https://oing9179.github.io/blog/2017/03/Setup-Nextcloud-using-Docker-and-Nginx/</guid>
      <pubDate>Wed, 15 Mar 2017 02:09:00 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h1&gt;&lt;p&gt;前些阵子瓷国各种网盘纷纷倒下，我也越来越担心自己的数据安全，没准哪天我的网盘帐号就被”无缘无故”的删掉什么的，于是我就琢磨着搭建个自己的私人网盘。现在这个时代最不缺的就是轮子，随便一搜就有好几个符合要求的自搭建（Self-Hosted）网盘软件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://owncloud.org/&quot;&gt;Owncloud&lt;/a&gt;&lt;br&gt;  不错的候选，不过一些高级特性（比如 Android/iOS app, 团队协作功能, etc.）需要购买订阅，而且还挺贵。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cozy.io/en/&quot;&gt;Cozy&lt;/a&gt;&lt;br&gt;  同样是不错的候选，但是试用了一会儿发现制作得比较粗糙，大部分功能只是存在而已，不够用。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nextcloud.com/&quot;&gt;Nextcloud&lt;/a&gt;&lt;br&gt;  Owncloud 的 fork，所有高级特性/企业团队协同功能全免费，还可以自己选择一些 Nextcloud 仓库内的 app 进行安装，Android app 也是免费使用（对应的 iOS app 售价是 $0.99）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;综上，我选择 Nextcloud。&lt;br&gt;接下来的问题是，我以后必定会在同一台主机内搭建多个网站，但 80 端口只能被一个进程监听。解决这个问题就是使用 Nginx 做反向代理，把入站连接根据域名/路径来转发到主机内的不同端口上。&lt;br&gt;还有一个问题就是通信安全问题。用 HTTP 这种明文通信协议的话，在通过某些恶意防火墙的时候 很可能会把通信内容给镜像下来 然后拿去分析。解决这个问题也不难，弄个免费 SSL 证书即可，比如 “&lt;a href=&quot;https://letsencrypt.org/&quot;&gt;Let’s Encrypt&lt;/a&gt;“。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt; 本文使用 Ubuntu 作为服务器系统，部分特性（比如 &lt;code&gt;ufw&lt;/code&gt;）不存在于其他 Linux 发行版里 或 需要代替方案（比如用 &lt;code&gt;iptables&lt;/code&gt; 代替 &lt;code&gt;ufw&lt;/code&gt;）。&lt;br&gt;
      
      </description>
      
      <comments>https://oing9179.github.io/blog/2017/03/Setup-Nextcloud-using-Docker-and-Nginx/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
