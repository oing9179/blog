<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on Hotaru&#39;s Notebook</title>
    <link>https://oing9179.github.io/blog/categories/programming/</link>
    <description>Recent content in Programming on Hotaru&#39;s Notebook</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2022, Hotaru Oyng.</copyright>
    <lastBuildDate>Sat, 03 Feb 2018 19:08:02 +0000</lastBuildDate><atom:link href="https://oing9179.github.io/blog/categories/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>自定义任务触发器 - Spring Framework</title>
      <link>https://oing9179.github.io/blog/posts/2018/february/custom-trigger-spring-framework/</link>
      <pubDate>Sat, 03 Feb 2018 19:08:02 +0000</pubDate>
      
      <guid>https://oing9179.github.io/blog/posts/2018/february/custom-trigger-spring-framework/</guid>
      <description>Preface 这几天做开发时有个比较特别的需求：当前时间的分钟数在 {5, 15, 25, 35, 45, 55} 的时候触发某个事件。Spring 自带的触发器（包括 Cron）都没法满足这个需求，于是就只能自定义一个触发器了。
Trigger 接口 写个类实现 org.springframework.scheduling.Trigger，接口里唯一的一个方法 nextExecutionTime(TriggerContext): Date 需要返回一个 Date 类型的对象，表示下一次执行任务的时间。
class ExampleTaskTrigger : Trigger {  override fun nextExecutionTime(triggerContext: TriggerContext): Date {  // triggerContext 有3个方法可以分别用来获取到任务的计划执行时间、实际执行时间和执行完成的时间。  // 该 Trigger 被首次调用时，那3个方法的返回值都为 null。  } } nextExecutionTime 方法会在两种情况下调用：
 Spring 容器启动时 定时任务执行完成后  注册定时任务 参考下面的 Spring 配置文件。 ExampleClass 类没有继承任何类或实现任何方法，类内只有一个无参数的 taskMethod 方法。
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;beans xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34;  xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xmlns:task=&amp;#34;http://www.springframework.org/schema/task&amp;#34;  xsi:schemaLocation=&amp;#34;http://www.springframework.org/schema/beans http://www.</description>
    </item>
    
    <item>
      <title>Kotlin 入门笔记</title>
      <link>https://oing9179.github.io/blog/posts/2017/october/note-get-started-with-kotlin/</link>
      <pubDate>Mon, 09 Oct 2017 12:13:00 +0000</pubDate>
      
      <guid>https://oing9179.github.io/blog/posts/2017/october/note-get-started-with-kotlin/</guid>
      <description>Preface 前些天用 Kotlin 写了个 CSGO 辅（wai）助（gua）的网页脚本，发现写 Kotlin 的话就不用跟屎一样的 JS 语法打交道了，于是我花了段时间详细的看了一遍 Kotlin 官方文档。 下文总结一些学习过程中的疑问和解答。
基本语法 1. 函数默认返回 Unit 而不是像 Java 那样的 void 先来看 Unit 的定义:
 &amp;ldquo;Unit&amp;rdquo; just stands for &amp;ldquo;something that has only one value&amp;rdquo;, it&amp;rsquo;s a traditional name, comes from functional languages. I agree that this name is not very intuitive, but we failed to invent a better name. – Andrey Breslav Mar 27 &amp;lsquo;14 at 6:41
 综合 StackOverflow 上 这个问题 的两个答案，返回 Unit 主要有2个原因：</description>
    </item>
    
    <item>
      <title>[Android] Task &amp; Document / Loader</title>
      <link>https://oing9179.github.io/blog/posts/2017/august/android-task-document-loader/</link>
      <pubDate>Fri, 11 Aug 2017 21:33:00 +0000</pubDate>
      
      <guid>https://oing9179.github.io/blog/posts/2017/august/android-task-document-loader/</guid>
      <description>Preface 这个月状态挺差的，各种不顺心和意外，不过还是照例把新学的东西整理一下吧。
 Task 和 Document 的基本概念 Loader 的基本概念和用法  Task &amp;amp; Document Task 下面的代码将启动照相机:
Intent lIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE); startActivityForResult(lIntent); 效果如图:
想把照相机和自己的 App 分开的话，就这样:
Intent lIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE); lIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); startActivityForResult(lIntent); 效果如图:
这张图里看上去有两个 App，在 Android 官方文档 里给每个像上图里的 App 定义了一个术语叫做 &amp;ldquo;Task&amp;rdquo;，也就是上图里有2个 Task。容纳许多个 Task 的整个屏幕（也就是上图里的整个屏幕）就叫做 &amp;ldquo;Recents screen&amp;rdquo;（其他非正式名称包括但不限于: Overview screen, Recent apps）.
Document 使用下面的代码可以让自己的 App 的某个 Activity 以多个 Task 的形式展现在 Recents screen 里:
Intent lIntent = new Intent(this, NewActivity.class); lIntent.addFlags(Intent.FLAG_ACTIVITY_MULTIPLE_TASK); lIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_DOCUMENT); startActivity(lIntent);  // 在新的 Activity 里使用下面的代码可以修改 Recents screen 里每个 Task 的标题 setTaskDescription(new ActivityManager.</description>
    </item>
    
    <item>
      <title>[Android] CoordinatorLayout 基本使用方法</title>
      <link>https://oing9179.github.io/blog/posts/2017/july/getting-started-with-coordinatorlayout/</link>
      <pubDate>Sat, 15 Jul 2017 10:28:49 +0000</pubDate>
      
      <guid>https://oing9179.github.io/blog/posts/2017/july/getting-started-with-coordinatorlayout/</guid>
      <description>Preface 近些天在做个 Android app demo，有个需求是 默认情况下放大 App 的图标，向上滚动后把它缩小 给下面的内容留出空间。 下面展示的这种效果就是用 CoordinatorLayout 的 Behavior 来做.
 基本概念 CoordinatorLayout，官方文档给出的意思是 &amp;ldquo;CoordinatorLayout is a super-powered FrameLayout. &amp;ldquo;，也就是说，直接使用它的话和用 FrameLayout 没有区别。 CoordinatorLayout 与 FrameLayout 的区别就在于：CoordinatorLayout 提供了一个内部类 Behavior，用它可以在运行时动态的调整各个 View 的布局。 通过覆盖 Behavior 的两个方法:
 public boolean layoutDependsOn(CoordinatorLayout parent, View child, View dependency) public boolean onDependentViewChanged(CoordinatorLayout parent, View child, View dependency)  来对具体的 View 进行布局.
布局文件 比如布局文件是这样的:
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt; &amp;lt;android.support.design.widget.CoordinatorLayout xmlns:android=&amp;#34;http://schemas.android.com/apk/res/android&amp;#34;  xmlns:app=&amp;#34;http://schemas.android.com/apk/res-auto&amp;#34;  xmlns:tools=&amp;#34;http://schemas.android.com/tools&amp;#34;  android:layout_width=&amp;#34;match_parent&amp;#34;  android:layout_height=&amp;#34;match_parent&amp;#34;  android:background=&amp;#34;@android:color/background_light&amp;#34;&amp;gt;   &amp;lt;!</description>
    </item>
    
    <item>
      <title>[Android] 阻止特定 Fragment 被恢复</title>
      <link>https://oing9179.github.io/blog/posts/2017/july/prevent-specific-fragment-being-restored/</link>
      <pubDate>Sun, 09 Jul 2017 12:29:28 +0000</pubDate>
      
      <guid>https://oing9179.github.io/blog/posts/2017/july/prevent-specific-fragment-being-restored/</guid>
      <description>Preface Activity 在经过旋转屏幕（或者其他原因导致配置变更）时，该 Activity 将被销毁并重新创建。 如果 Activity 内放置了 Fragment，Fragment 也会被销毁但会被 FragmentManager 恢复出来，这就带来了一个问题：有些 Fragment 因为时效性问题或者其它原因不需要被恢复。 下面就来解决这个问题。
启发 最开始是在 StackOverflow.com 看到了 这个 回答，看了下 Activity 的源码后发现 Fragment 的状态存放在 savedInstanceState.get(FRAGMENTS_TAG) 里，于是只要 savedInstanceState.remove(FRAGMENTS_TAG) 就能防止 Fragment 被恢复了。但这会导致所有的 Fragment 都不能被恢复，而我希望的是不恢复某个 Fragment 就足够了。 后来又花了一些时间调试一下代码，最后把知识都总结到这个类文件里了：
 用法 FragmentStateUtil 也很好用：
@Override protected void onCreate(@Nullable Bundle savedInstanceState) {  try {  FragmentStateUtil lFragmentStateUtil = new FragmentStateUtil(this, savedInstanceState);  lFragmentStateUtil.dropFragmentState(DontRestoreThisFragment.class);  } catch (Exception ignore) {  ignore.printStackTrace();  }  super.</description>
    </item>
    
    <item>
      <title>日记 - Android 实习测试题</title>
      <link>https://oing9179.github.io/blog/posts/2017/june/diary-android-tnternship-test/</link>
      <pubDate>Wed, 14 Jun 2017 21:57:00 +0000</pubDate>
      
      <guid>https://oing9179.github.io/blog/posts/2017/june/diary-android-tnternship-test/</guid>
      <description>Preface 有个小伙伴给我介绍了一家互联网公司，说让我投份简历看看能不能争取到一份校招实习资格。后来和这个公司的 HR 联系了一下，说让我先做做题。题目一共两道：
 第1题可能涉及到公司的业务，这里不做透露。 第2题是写一个 Android 自定义控件，是个尺子控件，要求使用系统提供的绘图API（android.graphics.Canvas）来做。  下面我就说下这次做自定义尺子控件都学到了什么。
开发流程记录 Day 1:
  上午: 看 Android 自定义组件 的官方文档，Google 找了两三篇中文教程，又到 GitHub 上看了一些 Demo 的源码，大致知道了 View 类的几个主要方法。
  下午: 搭建项目开发环境（Android Studio, AVD, etc.），覆盖了 android.view.View 类的3个方法
 onTouchEvent(MotionEvent event): 负责接受任何触摸事件 onMeasure(int widthMeasureSpec, int heightMeasureSpec): 负责算出控件在被载入后应该占用多大地方 onDraw(Canvas canvas): 负责绘制控件  然后又实现了3个度量单位（Centimeters, Inches, Feet）的枚举类以及换算它们类。
  Day 2:
 看了下 DPI(Dots(或者说 Pixels) per Inches)、dp(Device-Independent Pixels)、sp(Size-Independent Pixels) 的定义以及换算方法，并编写到度量单位换算类里. 比较令我意外的是，把 Centimeter 转成 dp 需要乘以一个数，这个数字居然是个常量。我还反复的在纸上推了几遍（在此感谢 KhanAcademy 教我了一种新的对待单位的方式），后来在尺子实现出来之后没有任何毛病。后来我又想了想 其实很正常，因为 dp 是以 DPI=160 为基准来计算的，最后的算式里它被消除掉了，于是整个算式就和 DPI 没什么关系了。 本来还想支持 sp 的换算来着，虽然本质上和 dp 一样，但因为有些视力障碍的用户会在系统设置里调整文字缩放，因此想实现这个单位还需要读取系统设置，为了主要进度 暂时放弃了这个功能。 进一步完善了 Ruler 类，因为构造函数里可选的初始化成员变量太多（&amp;gt;=4个，参考 《Effective Java》 这本书），于是使用了 Builder 设计模式。 初步的在 onDraw(Canvas canvas) 里做了一些运算，以及画出了错误的尺子刻度。  Day 3:</description>
    </item>
    
    <item>
      <title>The ICMP Tunnel</title>
      <link>https://oing9179.github.io/blog/posts/2017/june/the-icmp-tunnel/</link>
      <pubDate>Sat, 03 Jun 2017 11:36:00 +0000</pubDate>
      
      <guid>https://oing9179.github.io/blog/posts/2017/june/the-icmp-tunnel/</guid>
      <description>&lt;h1 id=&#34;preface&#34;&gt;Preface&lt;/h1&gt;
&lt;p&gt;经过一段时间的学习和研究，总算是把 ICMP Tunnel 的理论知识了解个大概了。
研究这项技术期间，出现次数对多的问题大概就是下面这几个：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;包从哪里来的?&lt;/li&gt;
&lt;li&gt;包去哪儿了?&lt;/li&gt;
&lt;li&gt;Tunnel 的另一端是谁?
答：操作系统，由操作系统进行包转发，就算设置了 tunnel 的对等端（Peer-to-Peer）也得由操作系统进行转发。于是 前两个问题基本上解决了。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;本文包含如下内容:
ICMP Tunnel 的基本技术细节, 包括但不限于 IP包、路由、&lt;code&gt;iptables&lt;/code&gt;、Python 代码.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux Tunnel Device and Route</title>
      <link>https://oing9179.github.io/blog/posts/2017/may/linux-tunnel-device-and-route/</link>
      <pubDate>Fri, 12 May 2017 12:04:33 +0000</pubDate>
      
      <guid>https://oing9179.github.io/blog/posts/2017/may/linux-tunnel-device-and-route/</guid>
      <description>Preface 通过这些天的研究和各种资料的查阅，终于对路由以及 Linux 的 Tunnel 设备有个大致的了解了。 先说路由，然后再带着路由的知识谈 tun 设备。
路由（Route） 运行命令 route -n 将得到如下输出：
Kernel IP routing table Destination Gateway Genmask Flags Metric Ref Use Iface 0.0.0.0 192.168.1.1 0.0.0.0 UG 600 0 0 wlan0 8.8.8.8 192.168.1.1 255.255.255.255 UGH 0 0 0 wlan0 10.0.8.0 0.0.0.0 255.255.255.0 U 0 0 0 tun0 169.254.0.0 0.0.0.0 255.255.0.0 U 1000 0 0 wlan0 192.168.1.0 0.0.0.0 255.255.255.0 U 600 0 0 wlan0 只看 Destination Gateway Genmask Iface 这4列就够了，下面将对这4列的含义一一进行解释。</description>
    </item>
    
    <item>
      <title>python-pytun scapy</title>
      <link>https://oing9179.github.io/blog/posts/2017/may/pytun/</link>
      <pubDate>Thu, 04 May 2017 21:33:47 +0000</pubDate>
      
      <guid>https://oing9179.github.io/blog/posts/2017/may/pytun/</guid>
      <description>Preface 好几天没写博客了，今天睡前写一篇糊弄一下吧。内容主要有2：
 用 python-pytun 和 scapy 试着弄个包转发工具 Depression 与自我恢复  python-pytun 有些 ISP 会对大流量的 UDP 包进行 QoS，导致的现象就是 上行UDP包100%丢包率 下行没问题，而且还能ping得通服务器。借助这一点，可以琢磨着弄个 ICMP Tunnel，显然 GitHub 上已经有轮子实现这个了，但是我怎么弄都没法让它转发 IP 包。于是干脆自己试着用 python 写一个。（当然，还没写出来，但新学的知识已经够写个笔记了） 选择 python 原因有2：
 调试方便一些，写一点调试一下，不用像 Java 那样还得等编译 主要原因还是有 python-pytun 这个现成的库，可以直接在 Linux 下创建 tun 设备（豚设备） 而不用自己搞什么 FileDescriptor ioctl 之类的东西  现在这个世界就是不缺轮子。
TUN / TAP 设备 直接由 Linux 内核提供。
 tun 设备：就是 tunnel 设备，可以收发 Network layer （Layer 3，比如 IP, ICMP）的包. tap 设备：就是 tap 设备（反正我没找到 tap 是什么的简写），可以收发 Data link layer（Layer 2，比如 ARP, IEEE 802.</description>
    </item>
    
    <item>
      <title>Java 并发 &amp; 多线程 - 基础知识</title>
      <link>https://oing9179.github.io/blog/posts/2017/april/java-concurrency-multi-threading-introduction/</link>
      <pubDate>Thu, 13 Apr 2017 09:21:06 +0000</pubDate>
      
      <guid>https://oing9179.github.io/blog/posts/2017/april/java-concurrency-multi-threading-introduction/</guid>
      <description>Preface 终于，今天终于有底气来谈论这个经常被各种面试官提及的话题了。 本文将涵盖目前入门 Java 并发 &amp;amp; 并行编程的基本理论知识。
 我（面试的时候）几乎场场都面多线程，我都说我不太懂。（感觉面试官在）传达给我一层意思：（学）Java（却）不懂多线程等于我没学 Java。 - 某位不愿意透露姓名的人（不是我）
 内存模型 理解 Java 内存模型是学习 Java 多线程的基础中的基础。
 强烈建议阅读原文：Java Memory Model - tutorials.jenkov.com
 Java 内存模型 先从基本的开始：
 内存被分为两个部分：堆（Stack）内存 和 栈（Heap）内存 Stack 就相当于许多书整齐的摞起来; Heap 就相当于许多书乱七八糟的散在那里. 每个线程都有自己的 Stack 内存，所有线程共用一个 Heap 内存。  现在加入方法和变量：  所有基本数据类型（就是所有小写字母开头的数据类型，包括 boolean, byte, short, char, int, long, float, double），由哪个线程创建的就只能由哪个线程访问。 所有对象都存放在 Heap 里，Integer Byte 之类的也算。  现在标出它们之间的关系：
 如果变量的数据类型是基本数据类型，那它就只存放于当前线程 Stack 内。 如果变量指向一个对象，这个变量存放于当前线程 Stack 内，但变量指向的对象存放于 Heap 里。 如果某个对象里包含方法，方法里包含一些变量，这些变量会存放于线程 Stack 内，即使这个对象存放在 Heap 里。 对象存放在 Heap 里，对象里的成员变量也存放在 Heap 里，不管这个成员变量是个基本数据类型还是一个对象的引用。 静态类只有一个实例，这个实例和其他对象一样存放在 Heap 里，静态类里的成员变量也跟着存放在 Heap 里。 综合上面几条得出：线程可以访问 Heap 内的任意对象，只要该线程有那个对象的引用，也就是线程内的某个变量指向 Heap 内的某个对象。  硬件内存模型 以前的那些还在用单核 CPU 的计算机，系统必须对线程进行调度，也就意味着 同一时刻只能有一个线程占用 CPU，也就不是真正的并行运算（就像 Python 那样的 &amp;ldquo;假&amp;rdquo; 多线程）。现在的计算机基本上都在用多核 CPU（有些时候还能看到主板上有多个 CPU），也就意味着 可以有多个线程同时运行。 CPU 会自带一点儿内存，它们称之为 寄存器（Registers）。CPU 还可以有一层或多层缓存内存（Cache Memory），一般来说 它们的容量都比寄存器大，但速度肯定没有 CPU 直接访问寄存器快。还有一个就是主内存（Main Memory），也就是存放在插在主板上的内存条里的数据。因为距离的原因导致 CPU 访问寄存器的速度 &amp;gt; CPU 访问缓存内存的速度 &amp;gt; CPU 访问主内存的速度。 当 CPU 需要主内存里的数据时候，就读取一部分数据然后存到缓存内存里，然后再从缓存内存里读取读取一部分数据到寄存器里，然后再进行运算。当 CPU 想把寄存器里的运算结果写回主内存里时 就把它先写到缓存内存里，然后由缓存内存决定何时把数据写回内存里。 一般情况下，当 CPU 需要的数据不存在于缓存内存里 并且 缓存内存里没有地方存放要从主内存读入新的数据 时，缓存内存就会把缓存的 CPU 运算结果写回主内存，然后再从主内存读入新的数据供 CPU 使用。</description>
    </item>
    
    <item>
      <title>我不知道的JS</title>
      <link>https://oing9179.github.io/blog/posts/2017/april/i-dont-know-js/</link>
      <pubDate>Mon, 10 Apr 2017 15:05:39 +0000</pubDate>
      
      <guid>https://oing9179.github.io/blog/posts/2017/april/i-dont-know-js/</guid>
      <description>《你不知道的JS》 (You don&amp;rsquo;t know JS) 读书笔记
 Preface 一直以为 JavaScript 就是 Script 版的 Java，但在看了这本书后才知道，它丫的就是个 Script，跟 Java 一点儿关系都没有。 JS 有一些 Java 没有的特性，比如：
 拿 function 当对象用（看过书后发现 function 真的是个对象） 除了 null 还有 undefined 还有 undecleared var 定义的变量的作用域不符合常理（至少我觉得跟 Java 里定义出来的变量的作用域不一样） this is not this. &amp;ldquo;半残&amp;quot;的面向对象概念 etc.  我本来还想指望看完这系列书后能对 JS 的刻板印象有所改观，然而事与愿违。 下面我将以一个水平不及初级Lava程序员的程序员的角度，为本书做一份笔记。
作用域和闭包（Scope &amp;amp; Closures） 1. 变量作用域因 var 而变得奇葩 先看代码：
function fn() {  {  var num = 1;  }  console.</description>
    </item>
    
    <item>
      <title>Markdown Navigator(Multi Markdown) for IntelliJ IDEA 破解</title>
      <link>https://oing9179.github.io/blog/posts/2016/august/markdown-navigator-for-intellij-idea-crack/</link>
      <pubDate>Mon, 08 Aug 2016 13:29:00 +0000</pubDate>
      
      <guid>https://oing9179.github.io/blog/posts/2016/august/markdown-navigator-for-intellij-idea-crack/</guid>
      <description>Preface 一直以来我都在寻找一款功能齐全 Markdown 编辑器，目前功能最全的是一款叫做 MarkdownPad 的编辑器，可惜的是它只能运行在Windows上。后来在 IDEA 的插件市场找到了这款Markdown编辑器，叫做 Markdown Navigator(原名为 Multi Markdown)，插件基本功能免费，一些特别的功能（比如 开启Markdown预览）就需要购买许可了，于是干脆把它也破掉吧。
开工 先弄个试用版的许可证激活一下看看 插件原价为 $19.99/yr，直接到 这里 填好相关资料就可以拿到15天的全功能试用许可证了。 然后对 LicenseAgent 类的 getLicenseCode(LicenseRequest licenseRequest)Z 和 isValidActivation()Z 下断点，然后调试该插件。 调试时，打开 被调试的IDEA的菜单栏 -&amp;gt; File -&amp;gt; Settings -&amp;gt; Languages &amp;amp; Frameworks -&amp;gt; Markdown，输入许可证，然后观察LicenseAgent类里的代码执行过程，得到下面的大致激活流程。
大致的激活流程 插件先拿着试用版激活码调用 LicenseAgent.getLicenseCode(LicenseRequest)Z，这会从服务器拿到激活响应以json体现：
{  &amp;#34;status&amp;#34;:&amp;#34;LicenseAgent.STATUS_*&amp;#34;,  &amp;#34;message&amp;#34;:&amp;#34;比如激活失败就会用这个来告诉用户.&amp;#34;,  &amp;#34;activation_code&amp;#34;:&amp;#34;激活响应信息&amp;#34;,  &amp;#34;license_code&amp;#34;:&amp;#34;猜测：服务器要求插件更新许可证用的字段，不一定每次都有.&amp;#34; } 下表描述上面的json里key对应的java字段：
   key java field     status LicenseAgent.STATUS   message LicenseAgent.MESSAGE   activation_code LicenseAgent.</description>
    </item>
    
    <item>
      <title>Mybatis Plus for IntelliJ IDEA 破解</title>
      <link>https://oing9179.github.io/blog/posts/2016/july/mybatis-plus-for-intellij-idea-crack/</link>
      <pubDate>Wed, 20 Jul 2016 19:25:00 +0000</pubDate>
      
      <guid>https://oing9179.github.io/blog/posts/2016/july/mybatis-plus-for-intellij-idea-crack/</guid>
      <description>Preface 前天发现了个不错的插件，叫 Mybatis Plus，是一个 IntelliJ IDEA 插件，用于协助编写使用MyBatis的程序。 插件官网上还给出了使用插件的 效果视频，感觉这插件能大大提升开发效率，于是安装它打算试试。 不料，安装后发现插件不允许试用，只能先购买后使用。于是我查了一些资料，试着自己处理掉DRM。
准备工作 按照 引用1 和 引用2 的方法，使用 jbe 直接修改类字节码。不过jbe貌似有bug，每次保存方法以后都会丢失一些信息（比如 保存Method body的字节码后，Method里 堆(Stack)的最大高度之类的信息就丢失了），导致IDEA载入这个插件的时候抛出载入类文件异常。 于是我改用 jd-gui 结合IntelliJ IDEA自带的Decompiler，反编译出原有的java代码，然后手动修改代码使其通过编译检查。 注意：每次修改代码后都进行编译，然后将编译后的类文件替换掉原来的jar包里的类文件，最后重启IDEA看效果和调试输出。
开工 作为切入点的两个类：JavaService 和 JavaUtil 先从 引用1 和 引用2 中所提到的两个类下手：
com.seventh7.mybatis.service.JavaService com.seventh7.mybatis.util.JavaUtil 用IDEA新建一个Java项目，并在 Project Structure 里选择 IntelliJ Platform Plugin SDK。没有这个选项就创建一个即可，如下图：
整个java项目的文件结构如下：
   目录 作用     /libs/ 插件的原版jar包和它引用的一些包   /src/main/java/ 按照原版jar包里的包结构创建,用于替换原版jar包里的类.   /src/main/resources/ 目前只存放 MANIFEST.MF， 用于记录原版jar包对应的版本号.    图中还有一些上面没有提到过的类，这些类以后会用到。只用这一张图也省得我再做其他的图了。</description>
    </item>
    
  </channel>
</rss>
