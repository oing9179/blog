<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Information Security on Hotaru&#39;s Notebook</title>
    <link>https://oing9179.github.io/blog/categories/information-security/</link>
    <description>Recent content in Information Security on Hotaru&#39;s Notebook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>Copyright © 2022, Hotaru Oyng.</copyright>
    <lastBuildDate>Wed, 22 Feb 2017 17:02:15 +0000</lastBuildDate><atom:link href="https://oing9179.github.io/blog/categories/information-security/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux / Windows 加密用户文件夹</title>
      <link>https://oing9179.github.io/blog/posts/2017/february/encrypt-home-directory-on-linux-and-windows/</link>
      <pubDate>Wed, 22 Feb 2017 17:02:15 +0000</pubDate>
      
      <guid>https://oing9179.github.io/blog/posts/2017/february/encrypt-home-directory-on-linux-and-windows/</guid>
      <description>Preface /home 下的用户文件夹可谓是隐私重灾区（Windows 下的 C:\Users\&amp;lt;用户名&amp;gt; 同理）。相比硬盘其他分区里的数据而言，用户文件夹下面会存放各种与用户隐私有关的文件。比如：
浏览器的历史记录, 自动填写的表单, Cookies, etc. 有些人喜欢在桌面上放各种文件，包括但不限于公务文件 大部分软件都在这里存放配置文件，配置文件里很可能包含个人信息 解决这个问题的办法就是加密用户文件夹。 本文分两部分内容，分别针对 Linux 和 Windows。
Linux 下加密用户文件夹 先决条件：
以后再登录该账户时需要提供密码 该操作需要root权限 其实可以用不要 root 权限的 ecryptfs-setup-private，但为了尽可能提高成功几率，我还是选择了用需要 root 权限的方法。 下文将以 user 用户为例，为其加密home文件夹。以下是具体操作步骤：
安装 ecryptfs-utils apt-get install ecryptfs-utils 创建一个临时用户并将其加入 sudo 用户组 sudo adduser --ingroup sudo user_temp 登出(Logout)当前用户，在登出前请尽量关闭正在运行的程序 按下 Ctrl+Alt+F1 进入 tty1，并以 user_temp 的身份登录 结束所有属于 user 用户的进程，如果结束所有进程后仍然后进程在运行，可以考虑添加 &amp;ldquo;&amp;ndash;signal 9&amp;rdquo; 参数来强制结束进程 sudo killall --user user 重命名 user 用户为 user_old，并将现有的用户文件夹移至 /home/user_old sudo usermod --home /home/user_old --move-home --login user_old user 查看 user_old 的用户基本信息 id user_old 输出内容大致如下，把输出的 gid 和 groups 记下来： uid=1234(user_old) gid=1234(user_group) groups=1234(user_group),27(sudo),2345(some_group) 添加新的用户名为 user，并加密它的home文件夹 # --ingroup 参数设置为上面的 gid 后面括号里的值 sudo adduser --home /home/user --ingroup user_group --encrypt-home user # 按下回车后会要求为该用户设置密码以及其他信息，其实只需要提供密码，其余的留空就行。 为 user 设置附属用户组 # --groups 参数设置为上面 groups 后面括号里的值，有多个用户组则用 &amp;#34;,&amp;#34; 分隔 usermod --append --groups sudo,some_group user 登录到 user 并挂载加密的文件系统 sudo --user user --login ecryptfs-mount-private 复制旧用户的所有文件到新的用户文件夹里，并修正权限 sudo cp -R /home/user_old/.</description>
    </item>
    
    <item>
      <title>v2ray - 比 Shadowsocks 更强大更复杂的替代品</title>
      <link>https://oing9179.github.io/blog/posts/2016/november/v2ray-more-complex-and-better-than-shadowsocks/</link>
      <pubDate>Sat, 26 Nov 2016 17:25:00 +0000</pubDate>
      
      <guid>https://oing9179.github.io/blog/posts/2016/november/v2ray-more-complex-and-better-than-shadowsocks/</guid>
      <description>Preface 为了穿越防火墙，瓷国程序员可谓是想尽办法。
VPN：带有非常明显的特征：IP上层的通信协议全是密文。 Shadowsocks：基于SOCKS改良的通信协议，无握手 全程加密 无特征。不过换个思路想其实特征也很明显：TCP/UDP上层的包全是密文，这样就和VPN没啥区别了。 后来有人想出来个办法并付诸实践，于是 Shadowsocks-R 出现了，其中一个特性就是为原 Shadowsocks 协议的数据流前面加上HTTP头，让防火墙误认为是HTTP协议，于是防火墙就应用针对HTTP的规则，于是就骗过防火墙了。
但终究需要面对一个事实：防火墙心情不好，总想着丢点儿包来降低自己分析数据包的负担，由此会导致 TCP 窗口骤降 RTO(Retry Timeout)骤升，然后就龟速了。
然后有个人写了个纯算法的通信协议叫 KCP，然后又有个人用这个协议写了个软件叫 v2ray。v2ray在引入KCP的同时对其进行了一些改进，其中引起我关注的是：
使用UDP作为下层协议，避免TCP带来的窗口和RTO问题。 更小的协议头部以躲避特征检查。 在协议数据流前面增加伪装，比如伪装成BT下载。 安装部署v2ray 首先把v2ray从 v2ray-core Releases on GitHub 下载回来并解压，解压后主要关注下面这4个文件：
文件名 用途 v2ray 软件本体 vpoint_socks_vmess.json 客户端配置示例 vpoint_vmess_freedom.json 服务器配置示例 systemd/v2ray.service v2ray systemd 服务 下面分别贴出我修改后的配置文件内容，稍作修改即可部署： 注意：json本身不支持注释，请在应用下面的配置前去掉注释。
客户端配置示例：
{ &amp;#34;log&amp;#34;: { &amp;#34;access&amp;#34;: &amp;#34;/var/log/v2ray/access.log&amp;#34;, &amp;#34;error&amp;#34;: &amp;#34;/var/log/v2ray/error.log&amp;#34;, &amp;#34;loglevel&amp;#34;: &amp;#34;info&amp;#34; }, &amp;#34;inbound&amp;#34;: { &amp;#34;protocol&amp;#34;: &amp;#34;socks&amp;#34;, &amp;#34;listen&amp;#34;: &amp;#34;127.0.0.1&amp;#34;, // SOCKS5监听地址，改成 &amp;#34;0.0.0.0&amp;#34; 则监听所有网卡. &amp;#34;port&amp;#34;: 1080, // SOCKS5监听端口 &amp;#34;settings&amp;#34;: { &amp;#34;auth&amp;#34;: &amp;#34;noauth&amp;#34;, &amp;#34;udp&amp;#34;: true, &amp;#34;timeout&amp;#34;: 30 } }, &amp;#34;outbound&amp;#34;: { &amp;#34;protocol&amp;#34;: &amp;#34;vmess&amp;#34;, &amp;#34;settings&amp;#34;: { &amp;#34;vnext&amp;#34;: [ { &amp;#34;address&amp;#34;: &amp;#34;8.</description>
    </item>
    
    <item>
      <title>Tails - 注重隐私的Linux发行版 试用</title>
      <link>https://oing9179.github.io/blog/posts/2016/august/tails-linux-tryout/</link>
      <pubDate>Sun, 21 Aug 2016 21:10:00 +0000</pubDate>
      
      <guid>https://oing9179.github.io/blog/posts/2016/august/tails-linux-tryout/</guid>
      <description>Preface 前几天我浏览网页时候突然想到一件事：有没有什么办法让整个系统都通过洋葱代理，这样的话 在这个系统里不管做什么都是匿名的，而不再限于洋葱浏览器。
Google &amp;ldquo;anonymous linux system&amp;rdquo; 第一条就给出了 Tails 这款Linux发行版，基于Debian sid(Still in develop)。这款Linux发行版的特点是：
匿名的上网：强制所有网络连接从洋葱出去。 使用这个系统的电脑上不会留下任何踪迹，除非你非要留下。 不过官方文档标注了一下：虽然关机/重启时候会把内存擦一遍，但因为技术原因 没能把显存也擦一遍。不过开发团队正着手于这件事。
自带最先进的加密工具，用来加密文件、邮件和即时通信。 简单介绍了一下，下面开始下载并试用它。
下载 Tails 打开 Tails 官网，点击页面右边的 &amp;ldquo;Install Tails &amp;lt;版本号&amp;gt;&amp;quot;，页面跳转后 点击&amp;quot;Download only&amp;rdquo;，然后再点击 &amp;ldquo;Download Torrent file&amp;rdquo; 即可。
Q &amp;amp; A:
为什么不点击那个 &amp;ldquo;LET&amp;rsquo;S START THE JOURNEY!&amp;rdquo; 大按钮? 我觉得那里面的教程更麻烦。（估计是给完全新手用的吧） 有必要进行 &amp;ldquo;Download and verify using OpenPGP&amp;rdquo; 吗? 如果是下载Torrent的话：没必要。因为Torrent客户端在下载完成后会自动校验文件的checksum。 可以使用 x雷 / xx旋风下载它吗? Transmission 或 Deluge Torrent 或者 qBittorrent 任选其一即可，x雷 xx旋风 之类的看看就行了。 下载完成后，就可以准备试用了。我在这里分别介绍 在VirtualBox里运行 和 安装到U盘。
警告：在虚拟化软件(Virtualization Software)里运行 Tails 是件很危险的事情，因为虚拟化软件所处的宿主系统(Host)和虚拟化软件都能知道你在做什么。</description>
    </item>
    
  </channel>
</rss>
