<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linearizability on Hotaru&#39;s Notebook</title>
    <link>https://oing9179.github.io/blog/tags/linearizability/</link>
    <description>Recent content in Linearizability on Hotaru&#39;s Notebook</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2022, Hotaru Oyng.</copyright>
    <lastBuildDate>Thu, 13 Apr 2017 09:21:06 +0000</lastBuildDate><atom:link href="https://oing9179.github.io/blog/tags/linearizability/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java 并发 &amp; 多线程 - 基础知识</title>
      <link>https://oing9179.github.io/blog/posts/2017/april/java-concurrency-multi-threading-introduction/</link>
      <pubDate>Thu, 13 Apr 2017 09:21:06 +0000</pubDate>
      
      <guid>https://oing9179.github.io/blog/posts/2017/april/java-concurrency-multi-threading-introduction/</guid>
      <description>Preface 终于，今天终于有底气来谈论这个经常被各种面试官提及的话题了。 本文将涵盖目前入门 Java 并发 &amp;amp; 并行编程的基本理论知识。
 我（面试的时候）几乎场场都面多线程，我都说我不太懂。（感觉面试官在）传达给我一层意思：（学）Java（却）不懂多线程等于我没学 Java。 - 某位不愿意透露姓名的人（不是我）
 内存模型 理解 Java 内存模型是学习 Java 多线程的基础中的基础。
 强烈建议阅读原文：Java Memory Model - tutorials.jenkov.com
 Java 内存模型 先从基本的开始：
 内存被分为两个部分：堆（Stack）内存 和 栈（Heap）内存 Stack 就相当于许多书整齐的摞起来; Heap 就相当于许多书乱七八糟的散在那里. 每个线程都有自己的 Stack 内存，所有线程共用一个 Heap 内存。  现在加入方法和变量：  所有基本数据类型（就是所有小写字母开头的数据类型，包括 boolean, byte, short, char, int, long, float, double），由哪个线程创建的就只能由哪个线程访问。 所有对象都存放在 Heap 里，Integer Byte 之类的也算。  现在标出它们之间的关系：
 如果变量的数据类型是基本数据类型，那它就只存放于当前线程 Stack 内。 如果变量指向一个对象，这个变量存放于当前线程 Stack 内，但变量指向的对象存放于 Heap 里。 如果某个对象里包含方法，方法里包含一些变量，这些变量会存放于线程 Stack 内，即使这个对象存放在 Heap 里。 对象存放在 Heap 里，对象里的成员变量也存放在 Heap 里，不管这个成员变量是个基本数据类型还是一个对象的引用。 静态类只有一个实例，这个实例和其他对象一样存放在 Heap 里，静态类里的成员变量也跟着存放在 Heap 里。 综合上面几条得出：线程可以访问 Heap 内的任意对象，只要该线程有那个对象的引用，也就是线程内的某个变量指向 Heap 内的某个对象。  硬件内存模型 以前的那些还在用单核 CPU 的计算机，系统必须对线程进行调度，也就意味着 同一时刻只能有一个线程占用 CPU，也就不是真正的并行运算（就像 Python 那样的 &amp;ldquo;假&amp;rdquo; 多线程）。现在的计算机基本上都在用多核 CPU（有些时候还能看到主板上有多个 CPU），也就意味着 可以有多个线程同时运行。 CPU 会自带一点儿内存，它们称之为 寄存器（Registers）。CPU 还可以有一层或多层缓存内存（Cache Memory），一般来说 它们的容量都比寄存器大，但速度肯定没有 CPU 直接访问寄存器快。还有一个就是主内存（Main Memory），也就是存放在插在主板上的内存条里的数据。因为距离的原因导致 CPU 访问寄存器的速度 &amp;gt; CPU 访问缓存内存的速度 &amp;gt; CPU 访问主内存的速度。 当 CPU 需要主内存里的数据时候，就读取一部分数据然后存到缓存内存里，然后再从缓存内存里读取读取一部分数据到寄存器里，然后再进行运算。当 CPU 想把寄存器里的运算结果写回主内存里时 就把它先写到缓存内存里，然后由缓存内存决定何时把数据写回内存里。 一般情况下，当 CPU 需要的数据不存在于缓存内存里 并且 缓存内存里没有地方存放要从主内存读入新的数据 时，缓存内存就会把缓存的 CPU 运算结果写回主内存，然后再从主内存读入新的数据供 CPU 使用。</description>
    </item>
    
  </channel>
</rss>
