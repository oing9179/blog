<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mybatis on Hotaru&#39;s Notebook</title>
    <link>https://oing9179.github.io/blog/tags/mybatis/</link>
    <description>Recent content in Mybatis on Hotaru&#39;s Notebook</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2022, Hotaru Oyng.</copyright>
    <lastBuildDate>Wed, 20 Jul 2016 19:25:00 +0000</lastBuildDate><atom:link href="https://oing9179.github.io/blog/tags/mybatis/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Mybatis Plus for IntelliJ IDEA 破解</title>
      <link>https://oing9179.github.io/blog/posts/2016/july/mybatis-plus-for-intellij-idea-crack/</link>
      <pubDate>Wed, 20 Jul 2016 19:25:00 +0000</pubDate>
      
      <guid>https://oing9179.github.io/blog/posts/2016/july/mybatis-plus-for-intellij-idea-crack/</guid>
      <description>Preface 前天发现了个不错的插件，叫 Mybatis Plus，是一个 IntelliJ IDEA 插件，用于协助编写使用MyBatis的程序。 插件官网上还给出了使用插件的 效果视频，感觉这插件能大大提升开发效率，于是安装它打算试试。 不料，安装后发现插件不允许试用，只能先购买后使用。于是我查了一些资料，试着自己处理掉DRM。
准备工作 按照 引用1 和 引用2 的方法，使用 jbe 直接修改类字节码。不过jbe貌似有bug，每次保存方法以后都会丢失一些信息（比如 保存Method body的字节码后，Method里 堆(Stack)的最大高度之类的信息就丢失了），导致IDEA载入这个插件的时候抛出载入类文件异常。 于是我改用 jd-gui 结合IntelliJ IDEA自带的Decompiler，反编译出原有的java代码，然后手动修改代码使其通过编译检查。 注意：每次修改代码后都进行编译，然后将编译后的类文件替换掉原来的jar包里的类文件，最后重启IDEA看效果和调试输出。
开工 作为切入点的两个类：JavaService 和 JavaUtil 先从 引用1 和 引用2 中所提到的两个类下手：
com.seventh7.mybatis.service.JavaService com.seventh7.mybatis.util.JavaUtil 用IDEA新建一个Java项目，并在 Project Structure 里选择 IntelliJ Platform Plugin SDK。没有这个选项就创建一个即可，如下图：
整个java项目的文件结构如下：
   目录 作用     /libs/ 插件的原版jar包和它引用的一些包   /src/main/java/ 按照原版jar包里的包结构创建,用于替换原版jar包里的类.   /src/main/resources/ 目前只存放 MANIFEST.MF， 用于记录原版jar包对应的版本号.    图中还有一些上面没有提到过的类，这些类以后会用到。只用这一张图也省得我再做其他的图了。</description>
    </item>
    
  </channel>
</rss>
