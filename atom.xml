<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>oing9179 的记事本儿</title>
  <subtitle>This is subtitle.</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://oing9179.github.io/"/>
  <updated>2017-02-02T09:55:05.466Z</updated>
  <id>https://oing9179.github.io/</id>
  
  <author>
    <name>oing9179</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>OnePlus 3T 从解锁 BootLoader 到 Xposed</title>
    <link href="https://oing9179.github.io/2017/01/OnePlus3T-from-Unlocking-Bootloader-to-Xposed-Installed/"/>
    <id>https://oing9179.github.io/2017/01/OnePlus3T-from-Unlocking-Bootloader-to-Xposed-Installed/</id>
    <published>2017-01-04T11:53:00.000Z</published>
    <updated>2017-02-02T09:55:05.466Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h2><p>原来的手机（HTC 802t）可能是到寿命了吧，开始时不时的出现 前台服务（Foreground Service）被系统Kill掉、手离开触屏后触点依然存在 的问题，再加上硬件老化，手机运行速度已经越来越慢了。于是，我就买了个新手机：OnePlus 3T。这款手机在欧美评价不错，XDA上也已经有不少 root / xposed 的帖子了。这篇blog就用来记录一些操作过程包括：</p>
<ul>
<li>解锁 BootLoader</li>
<li>安装 TWRP(Team Win Recovery Project) Recovery</li>
<li>卡刷 phh’s Superuser</li>
<li>卡刷/安装 Google 全家桶(OpenGApps Micro, 微小桶)</li>
<li>卡刷 Xposed</li>
</ul>
<a id="more"></a>
<p><strong>注： 新手机开机后会要求选择系统语言，由于我选择的是英文，所以下面的操作步骤中 手机里显示英文的地方仍然以英文记录下来。</strong><br><strong>免责声明：作者不对本文内容的准确性做任何保证，读者因以任何方式使用本文内容导致的一切后果均由读者自行承担。</strong></p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>先不要急着开机，做好准备工作再说。</p>
<ol>
<li>下载并安装好 Android SDK，在 Android SDK Manager 内安装 <code>platform-tools</code>(platform-tools 里面提供了后续步骤所需的 <code>fastboot</code> 命令行工具)，可选安装 <code>tools</code>(里面的 <code>adb</code> 用来安装 apk / 与手机传送文件)。</li>
<li>TWRP Recovery<br><a href="https://dl.twrp.me/oneplus3t/" target="_blank" rel="external">https://dl.twrp.me/oneplus3t/</a><br><a href="https://dl.twrp.me/oneplus3t/twrp-3.0.3-0-oneplus3t.img" target="_blank" rel="external">Direct link <code>twrp-3.0.3-0-oneplus3t.img</code></a></li>
<li>root 卡刷包 / root 权限管理软件<ul>
<li>phh’s Superuser<br>开源，刷这个包时候会修改手机内的 <code>boot.img</code>，<strong>目前不兼容 Lucky Patcher 之类的东西</strong>。<br><a href="https://superuser.phh.me/superuser.zip" target="_blank" rel="external">下载 卡刷包</a><br><a href="https://play.google.com/store/apps/details?id=me.phh.superuser" target="_blank" rel="external">下载 Superuser 管理软件</a></li>
<li>Chainfire’s SuperSU<br>闭源，目前最傻瓜化的 Superuser 解决方案。</li>
</ul>
</li>
<li><p>OpenGApps 卡刷包<br>打开 <a href="http://opengapps.org/" target="_blank" rel="external">OpenGApps.org</a>，按照下面的参数进行选择后再下载：</p>
<p> | 参数     | 值    |<br> |:———|:——|<br> | Platform | ARM64 |<br> | Android  | 6.0   |<br> | Variant  | micro |</p>
<p> <code>micro</code> 将包含以下App：</p>
<ul>
<li>Google Calendar (将替换掉原厂ROM自带的程序)</li>
<li>Google Now Launcher</li>
<li>Google Package Installer</li>
<li>Google Play services (OnePlus 3T 的 HydrogenOS 自带 Play Services，也会被替换掉)</li>
<li>Google Search</li>
<li>Google Text-to-Speech</li>
<li>Gmail</li>
<li>Hotword</li>
</ul>
</li>
<li><p>为 Xposed 的安装准备如下文件：</p>
<ul>
<li><a href="http://dl-xda.xposed.info/framework/sdk23/arm64/" target="_blank" rel="external">Xposed installer 卡刷包</a></li>
<li><a href="http://dl-xda.xposed.info/framework/uninstaller/" target="_blank" rel="external">Xposed uninstaller 卡刷包</a><br><strong>注：下载最新的 带有 <code>arm64</code> 字样的zip文件。</strong></li>
<li><a href="https://forum.xda-developers.com/showthread.php?t=3034811" target="_blank" rel="external">[OFFICIAL] Xposed for Lollipop/Marshmallow on XDA-Developers</a><br><strong>注：在帖子中找到 <code>XposedInstaller_3.1.1.apk</code> 并下载。</strong></li>
</ul>
</li>
<li><p><a href="https://play.google.com/store/apps/details?id=cn.wq.myandroidtools" target="_blank" rel="external">My Android Tools</a><br>因为 HydrogenOS 不允许禁用 手动安装/部分系统自带 的App，所以需要借助它来完成。<strong>注：该App需要root权限</strong>。</p>
</li>
</ol>
<h2 id="开机"><a href="#开机" class="headerlink" title="开机"></a>开机</h2><p>开机后会要求用户进行一些设定，能跳过的就跳过，包括 连接WiFi、指纹解锁。然后禁用手机内置的百度输入法，按照如下步骤操作：</p>
<ol>
<li>打开 <code>Settings -&gt; Language &amp; input</code></li>
<li>点击 <code>Current Keyboard</code> 后选择 <code>English (US) Android Keyboard (AOSP)</code></li>
<li>在 <code>Input Method</code> 里找到 <code>百度输入法</code> 然后点击它，将会弹出百度输入法的预设定界面</li>
<li>触摸 <code>Home</code> 键，这会使百度输入法会在通知栏发出一个通知</li>
<li>展开通知栏，长按百度输入法的通知，然后点击右侧的 <code>i</code> 图标，这将打开对百度输入法的通知进行设定的界面</li>
<li>点击百度输入法图标右侧的 <code>i</code> 图标，这会打开百度输入法的 <code>App info</code> 界面</li>
<li>点击 <code>Disable</code> 即可</li>
</ol>
<h2 id="解锁-BootLoader"><a href="#解锁-BootLoader" class="headerlink" title="解锁 BootLoader"></a>解锁 BootLoader</h2><p><strong><span style="color:red;">警告：</span>解锁BootLoader将会清除手机上的所有用户数据！</strong></p>
<ol>
<li>打开 <code>Settings -&gt; About phone</code>，滚动到最下面 找到 <code>Build number</code></li>
<li>多次点击 <code>Build number</code> 直至出现 Toast 内容为 <code>No need, you are already a developer.</code> 后停止点击。</li>
<li>回到 <code>Settings</code>，滚动到最下面，点击 <code>Developer options</code></li>
<li>找到 <code>OEM Unlocking</code> 后点击它，然后会提示用户是否要这么做，确认即可</li>
<li>手机关机，然后 同时按住 <code>VolumeUp + Power</code> 键，这将会进入 <code>fastboot</code> 模式，然后松开 <code>VolumeUp</code> 和 <code>Power</code> 键</li>
<li>使用 OnePlus 3T 自带的数据线连接将手机和电脑连接上</li>
<li><p>进入目录 <code>Android SDK 文件夹/platform-tools/</code>，找到 <code>fastboot</code> 文件(Windows 则为 <code>fastboot.exe</code>)，执行如下命令，这将会解锁手机并<strong>清除手机上的所有用户数据</strong>：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fastboot oem unlock</div></pre></td></tr></table></figure>
<p> 然后在手机上按照手机上的提示进行解锁。</p>
</li>
</ol>
<p>至此手机已经解锁完毕，手机将会重启至 Android 系统。</p>
<h2 id="安装-TWRP-phh’s-Superuser-Google-全家桶-OpenGApps"><a href="#安装-TWRP-phh’s-Superuser-Google-全家桶-OpenGApps" class="headerlink" title="安装 TWRP / phh’s Superuser / Google 全家桶(OpenGApps)"></a>安装 TWRP / phh’s Superuser / Google 全家桶(OpenGApps)</h2><h3 id="准备工作-1"><a href="#准备工作-1" class="headerlink" title="准备工作"></a>准备工作</h3><p>将下面列表里的卡刷包传送至手机，既可以以MTP的形式传输到手机，也可以用 <code>adb</code> 命令行工具来传输。<br>首先，与读者进行文件名的协商，协商好的文件名将在后续步骤中被使用。如下：</p>
<table>
<thead>
<tr>
<th style="text-align:left">东西</th>
<th style="text-align:left">卡刷包文件名</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">TWRP Recovery (这个不需要传到手机里)</td>
<td style="text-align:left">twrp.img</td>
</tr>
<tr>
<td style="text-align:left">phh’s Superuser</td>
<td style="text-align:left">superuser.zip</td>
</tr>
<tr>
<td style="text-align:left">Open GApps</td>
<td style="text-align:left">opengapps.zip</td>
</tr>
</tbody>
</table>
<h3 id="安装-TWRP"><a href="#安装-TWRP" class="headerlink" title="安装 TWRP"></a>安装 TWRP</h3><ol>
<li><p>将前面准备的 <code>twrp.img</code> 文件放到和 <code>fastboot</code> 同级目录下，然后执行下面的命令将 <code>twrp.img</code> 刷入手机 并 引导手机启动至 TWRP Recovery(Linux 需要root权限来执行)：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">fastboot flash recovery twrp.img</div><div class="line">fastboot boot twrp.img</div></pre></td></tr></table></figure>
</li>
<li><p>待 TWRP 启动后，会询问 <code>Keep System Read only?</code>，直接滑动下面的 <code>Swipe to Allow Modifications</code> 即可。<br><strong>注：xda论坛上的教程贴里提到了 ‘Allow Modifications 将会触发 <a href="https://source.android.com/security/verifiedboot/" target="_blank" rel="external">dm-verity</a>，会导致手机无法启动到Android系统’。我右滑 <code>Swipe to Allow Modifications</code> 后直接重启手机到Android系统，并没有出现上述问题。</strong></p>
</li>
</ol>
<h3 id="卡刷-phh’s-Superuser-Google-全家桶-OpenGApps"><a href="#卡刷-phh’s-Superuser-Google-全家桶-OpenGApps" class="headerlink" title="卡刷 phh’s Superuser / Google 全家桶(OpenGApps)"></a>卡刷 phh’s Superuser / Google 全家桶(OpenGApps)</h3><ol>
<li>现在看到的界面应该是 TWRP 的主界面</li>
<li>点击 <code>Install</code> ，在文件列表寻找前面准备工作里传输到手机里的 <code>superuser.zip</code>，并点击 <code>superuser.zip</code></li>
<li>现在 TWRP 会询问用户是否刷入这个zip包，先不急</li>
<li>点击 <code>Add more Zips</code>，然后找到并点击前面准备工作里传输到手机里的 <code>opengapps.zip</code></li>
<li>向右滑动 <code>Swipe to confirm Flash</code>，这将会把 <code>superuser.zip</code> 和 <code>opengapps.zip</code> 刷入手机</li>
<li>操作完成后 点击屏幕上的 <code>Home</code> 键回到主界面</li>
<li>点击 <code>Wipe</code>，然后点击 <code>Advanced Wipe</code></li>
<li>只勾选 <code>Dalvik / ART Cache</code> 和 <code>Cache</code></li>
<li>向右滑动 <code>Swipe to Wipe</code>，这将清空 ART Cache 和 Cache，确保 Google 全家桶能正常工作<br><strong>下面的操作将 “禁用” SetupWizard.apk，以免重启后出现不显示桌面的问题。</strong></li>
<li>操作完成后 点击屏幕上的 <code>Home</code> 键回到主界面</li>
<li>点击 <code>Mount</code>，勾选 <code>System</code>，然后点击屏幕上的 <code>Home</code> 回到主界面</li>
<li>依次点击 <code>Advanced -&gt; File Manager</code>，然后定位到 <code>/system/priv-app/SetupWizard/</code></li>
<li>点击列表里的 <code>SetupWizard.apk</code>，然后点击 <code>Rename File</code>，设定新的文件名为 <code>SetupWizard.apk.bak</code>，点击屏幕键盘上的对号按钮，向右滑动 <code>Swipe to Confirm</code>，至此 文件名修改完成。</li>
<li>上面的操作完成后，点击屏幕上的 <code>Home</code> 键回到主界面</li>
<li>依次点击 <code>Reboot -&gt; System</code>，稍后 手机将重启并进入Android系统</li>
</ol>
<h3 id="安装-phh’s-Superuser-管理软件"><a href="#安装-phh’s-Superuser-管理软件" class="headerlink" title="安装 phh’s Superuser 管理软件"></a>安装 phh’s Superuser 管理软件</h3><p>把 phh’s Superuser 管理软件的apk传输到手机，然后使用系统自带的文件管理器安装即可。<br>如果提示无法安装 需要启用 <code>Unknown sources</code>，请到 <code>Settings -&gt; Security &amp; fingerprint</code>，点击 <code>Unknown sources</code>，然后按照提示操作即可。</p>
<h3 id="配置-Google-全家桶-OpenGApps"><a href="#配置-Google-全家桶-OpenGApps" class="headerlink" title="配置 Google 全家桶(OpenGApps)"></a>配置 Google 全家桶(OpenGApps)</h3><p>由于系统自带的 Google Play Services 默认情况下是禁用状态，需要使用 <code>My Android Tools</code> 来启用它。</p>
<ol>
<li>将 <code>My Android Tools</code> 的 apk 传输到手机里，并使用自带的文件管理找到并安装它。</li>
<li>打开 My Android Tools，点击 <code>Apps</code>（如果没有，则从屏幕左边向右滑即可），选择 <code>Disabled</code> 选项卡</li>
<li>点击 <code>Google Play services</code>，在弹出的窗口中点击 <code>Enable</code>，这时会弹出root权限申请界面，点击 <code>Allow</code> 即可。</li>
<li>向上面第3步那样，对其余的以 <code>Google</code> 字样开头的列表项执行相同的操作</li>
<li>回到桌面，启动 <code>Play Store</code>，然后按照提示登录自己的Google帐号</li>
</ol>
<h2 id="安装-Xposed"><a href="#安装-Xposed" class="headerlink" title="安装 Xposed"></a>安装 Xposed</h2><p>本段内容将会用到 xposed 的一些文件，现与读者为文件名做如下约定：</p>
<table>
<thead>
<tr>
<th style="text-align:left">原文件名</th>
<th style="text-align:left">本段落中使用的文件名</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">xposed-v<code>&lt;数字&gt;</code>-sdk23-arm64.zip</td>
<td style="text-align:left">xposed-install.zip</td>
</tr>
<tr>
<td style="text-align:left">xposed-uninstaller-<code>&lt;数字&gt;</code>-arm64.zip</td>
<td style="text-align:left">xposed-uninstall.zip</td>
</tr>
<tr>
<td style="text-align:left">XposedInstaller_<code>&lt;版本号&gt;</code>.apk</td>
<td style="text-align:left">xposed.apk</td>
</tr>
</tbody>
</table>
<p>请读者确保下载的文件均为最新版，下载到的文件与上面的原文件名里的 <code>这种字体</code><strong>之外部分的文件名</strong> 相同即可。</p>
<ol>
<li>将 <code>xposed.apk</code> 传输到手机里并安装它，不需要启动它</li>
<li>将 <code>xposed-install.zip</code> 和 <code>xposed-uninstall.zip</code> 传输到手机备用。</li>
<li>按住 <code>VolumeUp + Power</code> 键重启手机到 fastboot 模式</li>
<li>像之前 <em>卡刷 phh’s Superuser / Google 全家桶(OpenGApps)</em> 一样，把 <code>xposed-install.zip</code> 刷入手机</li>
<li>重启手机到Android系统</li>
<li>打开App <code>Xposed Installer</code>，不出问题的话，界面上应该显示 <code>Xposed Framework version xx is active.</code></li>
</ol>
<p><strong>若没能进入到Android系统，或者说 Android启动动画一直循环，请进入 Recovery 并刷入 <code>xposed-uninstall.zip</code> 来卸载 xposed。</strong></p>
<p><span id="disable_dm-verity"></span></p>
<h2 id="禁用-dm-verity"><a href="#禁用-dm-verity" class="headerlink" title="禁用 dm-verity"></a>禁用 dm-verity</h2><p>有以下两种情况需要禁用 dm-verity：</p>
<ol>
<li>修改系统分区的文件并重启后 卡在1+图标的界面，手机也不发热，有可能就是触发了 <a href="https://source.android.com/security/verifiedboot/" target="_blank" rel="external">dm-verity</a>。</li>
<li>Root Explorer 无法修改 <code>/system</code> 分区的文件。</li>
</ol>
<p>解决方法也很简单：到 <a href="https://build.nethunter.com/android-tools/no-verity-opt-encrypt/" target="_blank" rel="external">no-verity-opt-encrypt</a> 下载最新版的zip包，然后重启手机到 recovery，然后把这个包刷进去，然后重启手机即可。</p>
<h2 id="修改系统DPI值"><a href="#修改系统DPI值" class="headerlink" title="修改系统DPI值"></a>修改系统DPI值</h2><p>修改DPI值目的是为了不改变屏幕大小的情况下，在屏幕内放下更多的内容。也就意味着：屏幕上显示的内容所占屏幕的比例会更小，说白话就是字和图片之类的会变小些。<br>有两种方法实现这个功能：</p>
<ol>
<li><p>执行命令：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">su</div><div class="line">wm density &lt;dpi&gt;</div></pre></td></tr></table></figure>
<p> 虽然重启手机后就能生效，但会导致一些App在显示一些图片时候出现大小不对 / 错位之类的问题。</p>
</li>
<li>修改文件 <code>/system/build.prop</code>。同样也有缺点：需要清空 ART Cache / Cache / Data 再进进入系统 才能避免<em>1</em>里面提到的问题。</li>
</ol>
<p>综上，为了尽可能完美的修改DPI值，我选择第二种方法。具体做法如下：</p>
<ol>
<li><p>用 <strong>Root Explorer</strong> 打开并编辑 <code>/system/build.prop</code>，在文件末尾加上下面这行文字：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">qemu.sf.lcd_density=&lt;dpi&gt;</div></pre></td></tr></table></figure>
<p> 比如我写的是 <code>qemu.sf.lcd_density=440</code>，至于这个值多大，看个人喜好而定。<br> 可以用上面提到的执行命令的方式修改DPI，然后重启手机看下效果。如果觉得看着不错 就把数值写到 <code>build.prop</code> 里。</p>
</li>
<li>重启手机到 recovery，wipe <code>Dalvik / ART Cache</code> <code>Data</code> 和 <code>Cache</code>，然后重启手机即可。</li>
</ol>
<p><strong>注：如果无法在 Root Explorer 里修改的话 需要刷个包，请移步 <a href="#disable_dm-verity">这里</a>。</strong></p>
<h2 id="Tips-amp-Tricks"><a href="#Tips-amp-Tricks" class="headerlink" title="Tips &amp; Tricks"></a>Tips &amp; Tricks</h2><ol>
<li>长按电源键 8 秒将强制关机。</li>
<li>xda论坛上也有说 长按电源键约 40 秒来强制关机。</li>
<li>BootLoader 解锁后，开机时候可以在5秒钟内按音量键来进入 fastboot / recovery 之类的。</li>
<li>双击电源键将打开照相机，按任意音量键拍照。</li>
<li>屏幕截图：同时按下 Power+VolumeDown 一小会儿。</li>
</ol>
<h2 id="更新历史"><a href="#更新历史" class="headerlink" title="更新历史"></a>更新历史</h2><p>04 Jan 2017: 首次发布<br>14 Jan 2017:</p>
<ol>
<li>添加：禁用dm-verity的方法。</li>
<li>添加：修改系统dpi值的办法。</li>
<li>去除：准备工作里提到了adb却没有使用它，于是去掉有关adb的废话。</li>
<li>添加：Tips &amp; Tricks: 第5条 屏幕截图</li>
</ol>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol>
<li><a href="https://forum.xda-developers.com/oneplus-3t/how-to/p-oneplus-3t-resource-t3510236" target="_blank" rel="external">[W.I.P][INDEX]OnePlus 3T Resource - xda-developers</a></li>
<li><a href="https://twrp.me/devices/oneplus3t.html" target="_blank" rel="external">TWRP Recovery for OnePlus 3T</a></li>
<li><a href="https://forum.xda-developers.com/android/software-hacking/wip-selinux-capable-superuser-t3216394" target="_blank" rel="external">phh’s SuperUser / OpenSource SELinux-capable SuperUser - xda-developers</a></li>
<li><a href="http://opengapps.org/" target="_blank" rel="external">Open GApps - opengapps.org</a></li>
<li><a href="https://github.com/opengapps/opengapps" target="_blank" rel="external">Open GApps on GitHub</a></li>
<li><a href="https://github.com/opengapps/opengapps/wiki/Package-Comparison" target="_blank" rel="external">Open Gapps Package Comparision</a></li>
<li><a href="https://github.com/opengapps/opengapps/wiki/Micro-Package" target="_blank" rel="external">Open GApps Micro Package Description</a></li>
<li><a href="https://github.com/opengapps/opengapps/wiki/FAQ\#user-content-10-i-receive-unfortunately-setup-wizard-has-stopped-working-after-installing-opengapps-on-android-60-or-higher-why" target="_blank" rel="external">Solution for “Unfortunately, setup wizard has stopped working” - Open GApps FAQ - Open GApps Wiki</a></li>
<li><a href="https://play.google.com/store/apps/details?id=cn.wq.myandroidtools" target="_blank" rel="external">My Android Tools on Google Play</a></li>
<li><a href="https://apkpure.com/my-android-tools/cn.wq.myandroidtools" target="_blank" rel="external">My Android Tools on apkpure.com</a></li>
<li><a href="https://source.android.com/security/verifiedboot/" target="_blank" rel="external">Verified Boot(dm-verity) - source.android.com</a></li>
<li><a href="https://build.nethunter.com/android-tools/no-verity-opt-encrypt/" target="_blank" rel="external">no-verity-opt-encrypt zip download</a></li>
<li><a href="https://forum.xda-developers.com/oneplus-3t/development/recovery-twrp-oneplus-3t-t3507308" target="_blank" rel="external">[Recovery] Official TWRP for the OnePlus 3T - xda-developers</a></li>
<li><a href="https://forum.xda-developers.com/oneplus-3t/how-to/guide-how-to-install-xposed-oxygenos-3-t3510367" target="_blank" rel="external">[GUIDE] How to install Xposed on OxygenOS 3.5.3 w/TL;DR - xda-developers</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h2&gt;&lt;p&gt;原来的手机（HTC 802t）可能是到寿命了吧，开始时不时的出现 前台服务（Foreground Service）被系统Kill掉、手离开触屏后触点依然存在 的问题，再加上硬件老化，手机运行速度已经越来越慢了。于是，我就买了个新手机：OnePlus 3T。这款手机在欧美评价不错，XDA上也已经有不少 root / xposed 的帖子了。这篇blog就用来记录一些操作过程包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解锁 BootLoader&lt;/li&gt;
&lt;li&gt;安装 TWRP(Team Win Recovery Project) Recovery&lt;/li&gt;
&lt;li&gt;卡刷 phh’s Superuser&lt;/li&gt;
&lt;li&gt;卡刷/安装 Google 全家桶(OpenGApps Micro, 微小桶)&lt;/li&gt;
&lt;li&gt;卡刷 Xposed&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Tech &amp; Life" scheme="https://oing9179.github.io/categories/Tech-Life/"/>
    
    
      <category term="OnePlus" scheme="https://oing9179.github.io/tags/OnePlus/"/>
    
      <category term="Android" scheme="https://oing9179.github.io/tags/Android/"/>
    
      <category term="BootLoader" scheme="https://oing9179.github.io/tags/BootLoader/"/>
    
      <category term="Xposed" scheme="https://oing9179.github.io/tags/Xposed/"/>
    
      <category term="TWRP Recovery" scheme="https://oing9179.github.io/tags/TWRP-Recovery/"/>
    
      <category term="OpenGApps" scheme="https://oing9179.github.io/tags/OpenGApps/"/>
    
  </entry>
  
  <entry>
    <title>v2ray - 比 Shadowsocks 更强大更复杂的替代品</title>
    <link href="https://oing9179.github.io/2016/11/v2ray-More-Complex-and-Better-than-Shadowsocks/"/>
    <id>https://oing9179.github.io/2016/11/v2ray-More-Complex-and-Better-than-Shadowsocks/</id>
    <published>2016-11-26T09:25:00.000Z</published>
    <updated>2017-02-02T09:55:13.400Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://avatars0.githubusercontent.com/u/14110142?v=3&amp;s=400" alt="V2ray icon"></p>
<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>为了穿越防火墙，瓷国程序员可谓是想尽办法。</p>
<ol>
<li>VPN：带有非常明显的特征：IP上层的通信协议全是密文。</li>
<li>Shadowsocks：基于SOCKS改良的通信协议，无握手 全程加密 无特征。不过换个思路想其实特征也很明显：TCP/UDP上层的包全是密文，这样就和VPN没啥区别了。</li>
</ol>
<p>后来有人想出来个办法并付诸实践，于是 Shadowsocks-R 出现了，其中一个特性就是为原 Shadowsocks 协议的数据流前面加上HTTP头，让防火墙误认为是HTTP协议，于是防火墙就应用针对HTTP的规则，于是就骗过防火墙了。</p>
<p>但终究需要面对一个事实：防火墙心情不好，总想着丢点儿包来降低自己分析数据包的负担，由此会导致 TCP 窗口骤降 RTO(Retry Timeout)骤升，然后就龟速了。</p>
<p>然后有个人写了个纯算法的通信协议叫 <a href="https://github.com/skywind3000/kcp" target="_blank" rel="external">KCP</a>，然后又有个人用这个协议写了个软件叫 <a href="https://github.com/v2ray/v2ray-core/" target="_blank" rel="external">v2ray</a>。v2ray在引入KCP的同时对其进行了一些改进，其中引起我关注的是：</p>
<ol>
<li>使用UDP作为下层协议，避免TCP带来的窗口和RTO问题。</li>
<li>更小的协议头部以躲避特征检查。</li>
<li>在协议数据流前面增加伪装，比如伪装成BT下载。</li>
</ol>
<a id="more"></a>
<h1 id="安装部署v2ray"><a href="#安装部署v2ray" class="headerlink" title="安装部署v2ray"></a>安装部署v2ray</h1><p>首先把v2ray从 <a href="https://github.com/v2ray/v2ray-core/releases" target="_blank" rel="external">v2ray-core Releases on GitHub</a> 下载回来并解压，解压后主要关注下面这4个文件：</p>
<table>
<thead>
<tr>
<th style="text-align:left">文件名</th>
<th style="text-align:left">用途</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">v2ray</td>
<td style="text-align:left">软件本体</td>
</tr>
<tr>
<td style="text-align:left">vpoint_socks_vmess.json</td>
<td style="text-align:left">客户端配置示例</td>
</tr>
<tr>
<td style="text-align:left">vpoint_vmess_freedom.json</td>
<td style="text-align:left">服务器配置示例</td>
</tr>
<tr>
<td style="text-align:left">systemd/v2ray.service</td>
<td style="text-align:left">v2ray systemd 服务</td>
</tr>
</tbody>
</table>
<p>下面分别贴出我修改后的配置文件内容，稍作修改即可部署：<br><strong>注意：json本身不支持注释，请在应用下面的配置前去掉注释。</strong></p>
<p>客户端配置示例：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  "log": &#123;</div><div class="line">    "access": "/var/log/v2ray/access.log",</div><div class="line">    "error": "/var/log/v2ray/error.log",</div><div class="line">    "loglevel": "info"</div><div class="line">  &#125;,</div><div class="line">  "inbound": &#123;</div><div class="line">    "protocol": "socks",</div><div class="line">    "listen": "127.0.0.1", // SOCKS5监听地址，改成 "0.0.0.0" 则监听所有网卡.</div><div class="line">    "port": 1080, // SOCKS5监听端口</div><div class="line">    "settings": &#123;</div><div class="line">      "auth": "noauth",</div><div class="line">      "udp": true,</div><div class="line">      "timeout": 30</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  "outbound": &#123;</div><div class="line">    "protocol": "vmess",</div><div class="line">    "settings": &#123;</div><div class="line">      "vnext": [</div><div class="line">        &#123;</div><div class="line">          "address": "45.76.68.128", // 远程服务器IP</div><div class="line">          "port": 39225, // 远程服务器端口</div><div class="line">          "users": [</div><div class="line">            &#123;</div><div class="line">              "id": "6a2c354d-0ddd-471f-9f38-e91cfcf278c8", // 使用 "uuidgen -r" 生成一个UUID 放在这里即可.</div><div class="line">              "alterId": 64,</div><div class="line">              "security": "aes-128-gcm" // security: 默认值 "aes-128-cfb"，PC 上可以改用 "aes-128-gcm".</div><div class="line">            &#125;</div><div class="line">          ]</div><div class="line">        &#125;</div><div class="line">      ]</div><div class="line">    &#125;,</div><div class="line">    "streamSettings": &#123;</div><div class="line">      "network": "kcp"</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  "inboundDetour": [</div><div class="line">    &#123;</div><div class="line">      // 启用 HTTP入站 代理</div><div class="line">      "protocol": "http",</div><div class="line">      "listen": "0.0.0.0", // 监听IP</div><div class="line">      "port": 8023, // 监听端口</div><div class="line">      "allocate": &#123;</div><div class="line">        "strategy": "always" // 只监听指定的端口, 也就是上面写的 8023。</div><div class="line">      &#125;,</div><div class="line">      "settings": &#123;</div><div class="line">        "timeout": 30 // 从客户端读取数据的超时设置（秒），0 表示不限时。默认值为 0。</div><div class="line">      &#125;,</div><div class="line">      "streamSettings": &#123;</div><div class="line">        "network": "tcp",</div><div class="line">        "security": "none",</div><div class="line">        "tcpSettings": &#123;</div><div class="line">          "connectionReuse": false</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ],</div><div class="line">  "outboundDetour": [</div><div class="line">    &#123;</div><div class="line">      "protocol": "freedom",</div><div class="line">      "settings": &#123;&#125;,</div><div class="line">      "tag": "direct"</div><div class="line">    &#125;</div><div class="line">  ],</div><div class="line">  "dns": &#123;</div><div class="line">    "servers": [</div><div class="line">      "8.8.8.8",</div><div class="line">      "8.8.4.4",</div><div class="line">      "127.0.0.1"</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  "routing": &#123;</div><div class="line">    "strategy": "rules",</div><div class="line">    "settings": &#123;</div><div class="line">      "domainStrategy": "IPIfNonMatch",</div><div class="line">      "rules": [</div><div class="line">        &#123;</div><div class="line">          "type": "field",</div><div class="line">          "ip": [</div><div class="line">            "0.0.0.0/8",</div><div class="line">            "10.0.0.0/8",</div><div class="line">            "100.64.0.0/10",</div><div class="line">            "127.0.0.0/8",</div><div class="line">            "169.254.0.0/16",</div><div class="line">            "172.16.0.0/12",</div><div class="line">            "192.0.0.0/24",</div><div class="line">            "192.0.2.0/24",</div><div class="line">            "192.168.0.0/16",</div><div class="line">            "198.18.0.0/15",</div><div class="line">            "198.51.100.0/24",</div><div class="line">            "203.0.113.0/24",</div><div class="line">            "::1/128",</div><div class="line">            "fc00::/7",</div><div class="line">            "fe80::/10"</div><div class="line">          ],</div><div class="line">          "outboundTag": "direct"</div><div class="line">        &#125;</div><div class="line">      ]</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  "transport": &#123;</div><div class="line">    "kcpSettings": &#123;</div><div class="line">      "uplinkCapacity": 10, // uplinkCapacity 和 downlinkCapacity 请根据v2ray的文档自行调节.</div><div class="line">      "downlinkCapacity": 10,</div><div class="line">      "header": &#123;</div><div class="line">        "type": "utp" // 将kcp协议伪装成BT协议.</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>服务器配置示例：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  "log": &#123;</div><div class="line">    // 日志文件地址和日志等级</div><div class="line">    "access": "/var/log/v2ray/access.log",</div><div class="line">    "error": "/var/log/v2ray/error.log",</div><div class="line">    "loglevel": "warning"</div><div class="line">  &#125;,</div><div class="line">  "inbound": &#123;</div><div class="line">    "listen": "8.8.8.8", // 服务器入站监听地址</div><div class="line">    "port": 1234, // 服务器入站监听端口</div><div class="line">    "protocol": "vmess",</div><div class="line">    "settings": &#123;</div><div class="line">      "clients": [</div><div class="line">        &#123;</div><div class="line">          "id": "00000000-0000-0000-0000-000000000000", // 这里的UUID需与上面客户端配置的UUID一致.</div><div class="line">          "level": 1,</div><div class="line">          "alterId": 64</div><div class="line">        &#125;</div><div class="line">      ]</div><div class="line">    &#125;,</div><div class="line">    "streamSettings": &#123;</div><div class="line">      "network": "kcp"</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  "outbound": &#123;</div><div class="line">    "protocol": "freedom",</div><div class="line">    "settings": &#123;</div><div class="line">      "timeout": 30</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  "outboundDetour": [</div><div class="line">    &#123;</div><div class="line">      "protocol": "blackhole",</div><div class="line">      "settings": &#123;&#125;,</div><div class="line">      "tag": "blocked"</div><div class="line">    &#125;</div><div class="line">  ],</div><div class="line">  "routing": &#123;</div><div class="line">    "strategy": "rules",</div><div class="line">    "settings": &#123;</div><div class="line">      "rules": [</div><div class="line">        &#123;</div><div class="line">          "type": "field",</div><div class="line">          "ip": [</div><div class="line">            "0.0.0.0/8",</div><div class="line">            "10.0.0.0/8",</div><div class="line">            "100.64.0.0/10",</div><div class="line">            "127.0.0.0/8",</div><div class="line">            "169.254.0.0/16",</div><div class="line">            "172.16.0.0/12",</div><div class="line">            "192.0.0.0/24",</div><div class="line">            "192.0.2.0/24",</div><div class="line">            "192.168.0.0/16",</div><div class="line">            "198.18.0.0/15",</div><div class="line">            "198.51.100.0/24",</div><div class="line">            "203.0.113.0/24",</div><div class="line">            "::1/128",</div><div class="line">            "fc00::/7",</div><div class="line">            "fe80::/10"</div><div class="line">          ],</div><div class="line">          "outboundTag": "blocked"</div><div class="line">        &#125;</div><div class="line">      ]</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  "transport": &#123;</div><div class="line">    "kcpSettings": &#123;</div><div class="line">      "uplinkCapacity": 20, // 这里同样请参照v2ray文档来配置.</div><div class="line">      "downlinkCapacity": 20,</div><div class="line">      "header": &#123;</div><div class="line">        "type": "utp" // 同客户端配置.</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="测试并运行"><a href="#测试并运行" class="headerlink" title="测试并运行"></a>测试并运行</h1><p>使用命令 <code>v2ray -config=&lt;配置文件名&gt; -test</code> 来测试配置文件是否有语法错误，使用 <code>v2ray -config=&lt;配置文件名&gt;</code> 来运行v2ray客户端/服务端。</p>
<p><strong>注：</strong> 在配置文件中有关日志的设置，因为使用了 <code>/var/log/</code> 这样的路径，在非root用户下运行v2ray很可能会出错并结束进程。建议配置systemd来运行v2ray。如果非要手动运行的话，请修改日志文件路径到 运行这个程序的用户可以访问的路径下。</p>
<h1 id="使用systemd将v2ray置为系统服务"><a href="#使用systemd将v2ray置为系统服务" class="headerlink" title="使用systemd将v2ray置为系统服务"></a>使用systemd将v2ray置为系统服务</h1><p>使用systemd来运行v2ray而不是手动运行，出于以下目的：</p>
<ol>
<li>不用手动敲命令行参数了</li>
<li>可以开机自动启动</li>
<li>重启v2ray也更简单了</li>
</ol>
<h2 id="添加-配置-v2ray-用户-日志文件夹-配置文件"><a href="#添加-配置-v2ray-用户-日志文件夹-配置文件" class="headerlink" title="添加/配置 v2ray 用户 日志文件夹 配置文件"></a>添加/配置 <code>v2ray</code> 用户 日志文件夹 配置文件</h2><p>root权限下执行下面命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># 创建用户/用户组</div><div class="line">useradd -M --user-group --shell /usr/sbin/nologin v2ray # 添加一个用户叫 v2ray，-M: 不创建对应的home目录.</div><div class="line"># 创建日志文件夹</div><div class="line">mkdir --parents /var/log/v2ray/</div><div class="line">cd /var/log/v2ray/</div><div class="line">touch ./access.log ./error.log</div><div class="line">chown -R v2ray:v2ray ./</div><div class="line">chmod 750 ./ # rwxr-x---</div><div class="line">chmod 640 ./* # rw-r-----</div><div class="line"># 创建配置文件</div><div class="line">mkdir --parent /etc/v2ray/</div><div class="line">cd /etc/v2ray/</div><div class="line">touch config.json</div><div class="line">chown -R v2ray:v2ray ./</div><div class="line">chmod 750 ./ # rwxr-x---</div><div class="line">chmod 640 ./config.json # rw-r-----</div></pre></td></tr></table></figure>
<p>然后将前面的配置文件示例写入 <code>config.json</code> 并按照自己的需求进行修改。</p>
<h2 id="安装-v2ray-可执行文件"><a href="#安装-v2ray-可执行文件" class="headerlink" title="安装 v2ray 可执行文件"></a>安装 v2ray 可执行文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># 创建v2ray的可执行文件目录</div><div class="line">mkdir --parents /usr/bin/v2ray/</div><div class="line">cd /usr/bin/v2ray/</div><div class="line">cp /somewhere/v2ray ./ # 从其他地方把v2ray可执行文件复制到此目录下</div><div class="line">chown -R v2ray:v2ray ./</div><div class="line">chmod 750 ./ # rwxr-x---</div><div class="line">chmod 540 ./v2ray # r-xr-----</div></pre></td></tr></table></figure>
<h2 id="配置-v2ray-的-systemd-服务"><a href="#配置-v2ray-的-systemd-服务" class="headerlink" title="配置 v2ray 的 systemd 服务"></a>配置 v2ray 的 systemd 服务</h2><p>创建文件 <code>/etc/systemd/system/v2ray.service</code> 并 <code>chown v2ray:v2ray</code> <code>chmod 640</code>，文件内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[Unit]</div><div class="line">Description=V2Ray Service</div><div class="line">After=network.target</div><div class="line">Wants=network.target</div><div class="line"></div><div class="line">[Service]</div><div class="line">Type=simple</div><div class="line">PIDFile=/var/run/v2ray.pid</div><div class="line">ExecStart=/usr/bin/v2ray/v2ray -config /etc/v2ray/config.json</div><div class="line">Restart=on-failure</div><div class="line">User=v2ray</div><div class="line">Group=v2ray</div><div class="line"></div><div class="line">[Install]</div><div class="line">WantedBy=multi-user.target</div></pre></td></tr></table></figure>
<h2 id="启动v2ray-service服务"><a href="#启动v2ray-service服务" class="headerlink" title="启动v2ray.service服务"></a>启动v2ray.service服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">systemctl daemon-reload # 载入新添加的 v2ray.service</div><div class="line">systemctl start v2ray # 启动v2ray服务</div></pre></td></tr></table></figure>
<h1 id="更新历史"><a href="#更新历史" class="headerlink" title="更新历史"></a>更新历史</h1><p>26 Nov 2016：首次发布<br>17 Jan 2017：</p>
<ul>
<li>更新：客户端配置文件：支持HTTP代理</li>
<li>添加：Linux下使用systemd来运行v2ray</li>
</ul>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ol>
<li><a href="https://v2ray.github.io" target="_blank" rel="external">v2ray 官方文档</a></li>
<li><a href="https://github.com/v2ray/v2ray-core/" target="_blank" rel="external">v2ray on GitHub</a></li>
<li><a href="https://github.com/skywind3000/kcp" target="_blank" rel="external">KCP - A Fast and Reliable ARQ Protocol on GitHub</a></li>
<li><a href="https://www.v2ray.com/chapter_02/05_transport.html" target="_blank" rel="external">配置 uplinkCapacity 和 downlinkCapacity - 传输配置 · V2Ray 官方网站</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/14110142?v=3&amp;amp;s=400&quot; alt=&quot;V2ray icon&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h1&gt;&lt;p&gt;为了穿越防火墙，瓷国程序员可谓是想尽办法。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;VPN：带有非常明显的特征：IP上层的通信协议全是密文。&lt;/li&gt;
&lt;li&gt;Shadowsocks：基于SOCKS改良的通信协议，无握手 全程加密 无特征。不过换个思路想其实特征也很明显：TCP/UDP上层的包全是密文，这样就和VPN没啥区别了。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;后来有人想出来个办法并付诸实践，于是 Shadowsocks-R 出现了，其中一个特性就是为原 Shadowsocks 协议的数据流前面加上HTTP头，让防火墙误认为是HTTP协议，于是防火墙就应用针对HTTP的规则，于是就骗过防火墙了。&lt;/p&gt;
&lt;p&gt;但终究需要面对一个事实：防火墙心情不好，总想着丢点儿包来降低自己分析数据包的负担，由此会导致 TCP 窗口骤降 RTO(Retry Timeout)骤升，然后就龟速了。&lt;/p&gt;
&lt;p&gt;然后有个人写了个纯算法的通信协议叫 &lt;a href=&quot;https://github.com/skywind3000/kcp&quot;&gt;KCP&lt;/a&gt;，然后又有个人用这个协议写了个软件叫 &lt;a href=&quot;https://github.com/v2ray/v2ray-core/&quot;&gt;v2ray&lt;/a&gt;。v2ray在引入KCP的同时对其进行了一些改进，其中引起我关注的是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用UDP作为下层协议，避免TCP带来的窗口和RTO问题。&lt;/li&gt;
&lt;li&gt;更小的协议头部以躲避特征检查。&lt;/li&gt;
&lt;li&gt;在协议数据流前面增加伪装，比如伪装成BT下载。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://oing9179.github.io/categories/Linux/"/>
    
    
      <category term="v2ray" scheme="https://oing9179.github.io/tags/v2ray/"/>
    
      <category term="shadowsocks" scheme="https://oing9179.github.io/tags/shadowsocks/"/>
    
      <category term="kcp" scheme="https://oing9179.github.io/tags/kcp/"/>
    
  </entry>
  
  <entry>
    <title>使用 bind9 配合 dnscrypt-proxy 搭建自己的无污染的DNS服务器</title>
    <link href="https://oing9179.github.io/2016/09/Clean-DNS-Server-Setup-Using-bind9-and-dnscrypt-proxy/"/>
    <id>https://oing9179.github.io/2016/09/Clean-DNS-Server-Setup-Using-bind9-and-dnscrypt-proxy/</id>
    <published>2016-09-02T09:23:00.000Z</published>
    <updated>2017-02-02T09:50:28.312Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://dnscrypt.org/dnscrypt.png" alt="DNSCrypt"></p>
<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>因为众所周知的原因，<a href="https://zh.wikipedia.org/zh-cn/%E5%9F%9F%E5%90%8D%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%93%E5%AD%98%E6%B1%A1%E6%9F%93" title="DNS缓存投毒 - Wikipedia" target="_blank" rel="external">DNS缓存投毒</a>(aka: <a href="https://en.wikipedia.org/wiki/DNS_spoofing" title="DNS Spoofing - Wikipedia" target="_blank" rel="external">DNS Spoofing</a>) 的出现是因为DNS查询通信协议的设计缺陷导致的，因为DNS查询协议的设计者当时并没有预料到现在的网络环境这么糟糕。利用这个缺陷可以实现一些特技，比如：</p>
<ul>
<li>用浏览器打开Google然后跳转到了Baidu.</li>
<li>ISP(网络服务提供商, 比如 奠信 联不通 移不动, etc.)在网页里随意插入广告.</li>
<li>这里没能列举出的一些特技.</li>
</ul>
<p>为了解决这个问题，我（不知道在什么地方什么时候意外的）发现了个软件叫做 <a href="https://dnscrypt.org" title="DNSCrypt homepage" target="_blank" rel="external">dnscrypt</a>(<a href="https://github.com/jedisct1/dnscrypt-proxy" title="dnscrypt-proxy on GitHub" target="_blank" rel="external">GitHub项目主页</a>)，相比传统的DNS查询有如下优点：</p>
<ul>
<li>与DNS服务器通信过程中使用SSL加密.</li>
<li>可以强制使用TCP，避免因UDP丢包而浪费时间.</li>
<li>有些DNS服务器不会记录用户查了哪些记录，进而也就不会知道用户去了哪些网站.</li>
<li>有些DNS服务器支持DNSSEC，进一步加密/验证DNS查询结果.</li>
</ul>
<a id="more"></a>
<p>不过使用dnscrypt的缺点也是有的：相比ISP提供的DNS，dnscrypt的查询会慢上最少300ms。导致这个问题的原因包括但不限于：</p>
<ul>
<li>UDP丢包.</li>
<li>强制使用TCP的话，TCP握手也要很久.</li>
<li>SSL握手.</li>
<li>城门口堵车了.</li>
</ul>
<p>不过这个问题也是可以解决的，那就是在本地搭建一个DNS服务器来缓存dnscrypt的查询结果。<br>接下来，我就简单的写一下 dnscrypt-proxy 和 bind(用来缓存DNS查询结果) 的安装和配置.</p>
<blockquote>
<p>注1：下面的内容适用于Ubuntu及其衍生Distro，其他Linux Distro可能需要做些修改。<br>注2：我之所以没用 <code>dnsmasq</code>，是因为无论怎么配置它 它都不缓存向本地请求的记录，但会缓存非本地地址的记录 比如用8.8.8.8它就会缓存。</p>
</blockquote>
<h1 id="dnscrypt-proxy"><a href="#dnscrypt-proxy" class="headerlink" title="dnscrypt-proxy"></a>dnscrypt-proxy</h1><blockquote>
<p><a href="https://dnscrypt.org" title="DNSCrypt homepage" target="_blank" rel="external">DNSCrypt 主页</a><br><a href="https://github.com/jedisct1/dnscrypt-proxy" title="dnscrypt-proxy on GitHub" target="_blank" rel="external">dnscrypt-proxy GitHub 主页</a><br><a href="https://launchpad.net/~anton+/+archive/ubuntu/dnscrypt" title="dnscrypt-proxy launchpad.net PPA" target="_blank" rel="external">dnscrypt-proxy launchpad.net PPA</a></p>
</blockquote>
<h2 id="安装-dnscrypt-proxy"><a href="#安装-dnscrypt-proxy" class="headerlink" title="安装 dnscrypt-proxy"></a>安装 dnscrypt-proxy</h2><p>执行下面的命令来安装dnscrypt-proxy：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install dnscrypt-proxy</div></pre></td></tr></table></figure>
<h2 id="配置-dnscrypt-proxy"><a href="#配置-dnscrypt-proxy" class="headerlink" title="配置 dnscrypt-proxy"></a>配置 dnscrypt-proxy</h2><p>配置dnscrypt-proxy，配置文件在 <code>/etc/default/dnscrypt-proxy</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"># What local IP the daemon will listen to, with an optional port.</div><div class="line"># The default port is 53. If using systemd, this is not used and must be</div><div class="line"># specified in dnscrypt-proxy.socket.</div><div class="line"># 设置dnscrypt-proxy监听哪个地址的哪个端口。</div><div class="line"># 然而这个配置项并不管用，请参考下面的配置方法。</div><div class="line">DNSCRYPT_PROXY_LOCAL_ADDRESS1=127.0.2.1:53</div><div class="line">#DNSCRYPT_PROXY_LOCAL_ADDRESS2=127.0.2.2:53</div><div class="line"></div><div class="line"># Remote DNS(Crypt) resolver.</div><div class="line"># You can find a list of resolvers at</div><div class="line"># /usr/share/dnscrypt-proxy/dnscrypt-resolvers.csv.</div><div class="line"># 从 dnscrypt-resolvers.csv 的 &apos;name&apos; 列里挑选自己想要的dns服务器.</div><div class="line"># 这里给几个例子：&quot;cisco&quot; 访问速度最快，&quot;dnscrypt.eu-dk&quot; 不会记录查询日志.</div><div class="line">DNSCRYPT_PROXY_RESOLVER_NAME1=dnscrypt.eu-nl</div><div class="line">#DNSCRYPT_PROXY_RESOLVER_NAME2=dnscrypt.eu-dk</div><div class="line"></div><div class="line"># Extra flags to pass to dnscrypt-proxy</div><div class="line"># dnscrypt-proxy 的其他命令行参数，这里简单解释下：</div><div class="line"># --tcp-only：只使用TCP连接.</div><div class="line"># --logfile=/path/logfile：设置日志的存放位置.</div><div class="line"># --loglevel=7：7为DEBUG级别的日志输出级别, 能看到查询超时的日志信息.</div><div class="line">DNSCRYPT_PROXY_OPTIONS=&quot;--tcp-only --logfile=/var/log/dnscrypt-proxy/dnscrypt-proxy.log --loglevel=7&quot;</div></pre></td></tr></table></figure>
<p><code>DNSCRYPT_PROXY_LOCAL_ADDRESS1</code> 无效的原因是因为 使用systemd的话会在另一个地方配置这个参数，<a href="#references_3">这篇博文</a> 提到了解决这个问题的方法。<br>执行命令来覆盖 <code>dnscrypt-proxy.socket</code> 的配置：<code>systemctl edit dnscrypt-proxy.socket</code>，然后写入如下内容（假设让dnscrypt监听 127.0.2.1:53）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[Socket]</div><div class="line">ListenStream=</div><div class="line">ListenDatagram=</div><div class="line">ListenStream=127.0.2.1:53</div><div class="line">ListenDatagram=127.0.2.1:53</div></pre></td></tr></table></figure>
<blockquote>
<p>注：systemctl 会使用 emacs 作为文本编辑器，如果想用别的（比如 vim）就执行 <code>export SYSTEMD_EDITOR=&quot;vim&quot;</code> 即可。</p>
</blockquote>
<p>配置完成后执行命令 <code>systemctl restart dnscrypt-proxy</code>，使配置文件生效。</p>
<h1 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h1><p>用来搭建DNS服务器。</p>
<blockquote>
<p><a href="https://kb.isc.org/article/AA-01031" title="Bind 9 Reference Manual" target="_blank" rel="external">Bind 9 Reference Manual</a></p>
</blockquote>
<h2 id="安装-bind9"><a href="#安装-bind9" class="headerlink" title="安装 bind9"></a>安装 bind9</h2><p>一行命令搞定：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install bind9 bind9-doc</div></pre></td></tr></table></figure>
<h2 id="配置-bind9"><a href="#配置-bind9" class="headerlink" title="配置 bind9"></a>配置 bind9</h2><p>编辑文件 <code>/etc/bind/named.conf.options</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">options &#123;</div><div class="line">        directory &quot;/var/cache/bind&quot;;</div><div class="line"></div><div class="line">        // 禁用dnssec</div><div class="line">        dnssec-enable no;</div><div class="line">        dnssec-validation no;</div><div class="line"></div><div class="line">        auth-nxdomain no;    # conform to RFC1035</div><div class="line">        listen-on-v6 &#123; any; &#125;;</div><div class="line"></div><div class="line">        // 启用递归查询</div><div class="line">        recursion yes;</div><div class="line">        // 允许指定的地址向bind9请求dns查询, 参考下面的 &quot;acl goodclients&quot;.</div><div class="line">        allow-query &#123; goodclients; &#125;;</div><div class="line"></div><div class="line">        // 将dns请求转发到指定地址</div><div class="line">        forwarders &#123;</div><div class="line">                // 这里我们把它转发到 dnscrypt-proxy.</div><div class="line">                127.0.2.1;</div><div class="line">        &#125;;</div><div class="line">        // bind9 只做dns转发工作而不做解析工作.</div><div class="line">        forward only;</div><div class="line"></div><div class="line">        // 缓存dns记录最多占用多少内存, 单位 bytes.</div><div class="line">        // 64MiB = 65536Bytes</div><div class="line">        max-cache-size 65536;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">// Access Control List，这里用来配置成 允许向bind9查询的客户端.</div><div class="line">acl goodclients &#123;</div><div class="line">        127.0.0.1;</div><div class="line">        localhost;</div><div class="line">        localnets;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">// bind9 日志</div><div class="line">logging &#123;</div><div class="line">        // 配置一个channel，该channel会记录详细的dns请求和响应.</div><div class="line">        channel channel_debug &#123;</div><div class="line">                // size 10m: 每个日志文件最大 10MiB.</div><div class="line">                // versions 3: 超过10MiB就创建新的日志文件.</div><div class="line">                file &quot;/var/log/named/channel_debug.log&quot; versions 3 size 10m;</div><div class="line">                severity debug 3;</div><div class="line">                print-time yes;</div><div class="line">                print-severity yes;</div><div class="line">        &#125;;</div><div class="line">        // 配置一个channel，该channel不会记录dns请求和响应.</div><div class="line">        channel channel_default &#123;</div><div class="line">                file &quot;/var/log/named/channel_debug.log&quot; versions 3 size 10m;</div><div class="line">                severity info;</div><div class="line">                print-time yes;</div><div class="line">                print-severity yes;</div><div class="line">        &#125;;</div><div class="line">        // 默认使用 channel_default.</div><div class="line">        category default &#123;</div><div class="line">                channel_default;</div><div class="line">        &#125;;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="为部分网站使用大陆DNS"><a href="#为部分网站使用大陆DNS" class="headerlink" title="为部分网站使用大陆DNS"></a>为部分网站使用大陆DNS</h1><p>如果所有DNS请求都通过dnscrypt-proxy的话 就没法享受大陆CDN加速了，一个明显的现象就是 dns解析完了但网页得等好久才打开。<br>为了解决这个问题，GitHub上有个项目 <a href="https://github.com/felixonmars/dnsmasq-china-list" title="GitHub - felixonmars/dnsmasq-china-list" target="_blank" rel="external">felixonmars/dnsmasq-china-list</a> 用来配置dnsmasq专门为大陆网站指定大陆的dns。但dnsmasq的配置文件没法用在bind9上，所以我写了个py脚本，用来把 dnsmasq配置文件 转成 bind9 zone配置文件。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python3</span></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> argparse</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__dnsmasqconf2bind9zone</span><span class="params">(dnsmasq_conf: str, dns_server: str)</span> -&gt; str:</span></div><div class="line">    TEMPLATE_BIND9_ZONE = (<span class="string">"zone \"&#123;DOMAIN&#125;\" IN &#123;&#123;\n"</span></div><div class="line">                           <span class="string">"    type forward;\n"</span></div><div class="line">                           <span class="string">"    forwarders &#123;&#123;\n"</span></div><div class="line">                           <span class="string">"        &#123;DNS_SERVER&#125;;\n"</span></div><div class="line">                           <span class="string">"    &#125;&#125;;\n"</span></div><div class="line">                           <span class="string">"&#125;&#125;;\n"</span>)</div><div class="line"></div><div class="line">    lSetBind9zone = []</div><div class="line">    n = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> dnsmasq_conf.split(<span class="string">"\n"</span>):</div><div class="line">        lStrSplit = line.split(<span class="string">"/"</span>)</div><div class="line">        <span class="keyword">if</span> len(lStrSplit) != <span class="number">3</span>:</div><div class="line">            <span class="keyword">continue</span></div><div class="line">        lSetBind9zone.append(TEMPLATE_BIND9_ZONE.format(DOMAIN=lStrSplit[<span class="number">1</span>], DNS_SERVER=dns_server))</div><div class="line">        <span class="keyword">pass</span></div><div class="line">    <span class="keyword">return</span> <span class="string">""</span>.join(lSetBind9zone)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init_argparse</span><span class="params">()</span> -&gt; argparse.Namespace:</span></div><div class="line">    parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter,</div><div class="line">                                     prog=<span class="string">"dnsmasqconf2bind9zone.py"</span>,</div><div class="line">                                     description=<span class="string">"dnsmasq.conf to bind9 zone utility.\n"</span></div><div class="line">                                                 <span class="string">"This utility will read dnsmasq.con from stdin then output put to stdout.\n"</span></div><div class="line">                                                 <span class="string">"\n"</span></div><div class="line">                                                 <span class="string">"For accelerated domains for china check out: \"https://github.com/felixonmars/dnsmasq-china-list\".\n"</span></div><div class="line">                                                 <span class="string">"Quick download url: https://github.com/felixonmars/dnsmasq-china-list/blob/master/accelerated-domains.china.conf?raw=true"</span>)</div><div class="line"></div><div class="line">    parser.add_argument(<span class="string">"--forward-to"</span>, default=<span class="string">"223.5.5.5"</span>,</div><div class="line">                        help=<span class="string">"Where forward DNS request to. The default is \"223.5.5.5\"."</span>)</div><div class="line">    <span class="keyword">return</span> parser.parse_args()</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(argv)</span>:</span></div><div class="line">    args = __init_argparse()</div><div class="line">    print(__dnsmasqconf2bind9zone(sys.stdin.read(), args.forward_to))</div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main(sys.argv)</div></pre></td></tr></table></figure>
<ol>
<li>将上面的代码保存到 <code>dnsmasqconf2bind9zone.py</code>.</li>
<li>到 <a href="https://github.com/felixonmars/dnsmasq-china-list" title="GitHub - felixonmars/dnsmasq-china-list" target="_blank" rel="external">felixonmars/dnsmasq-china-list</a> 下载 <code>accelerated-domains.china.conf</code> 文件.</li>
<li><p>执行命令，将 dnsmasq conf 文件转为 bind 9 zone 配置文件.</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cat accelerated-domains.china.conf | python3 dnsmasqconf2bind9zone.py &gt; named.conf.accelerated-domains-china-zone</div><div class="line"># 也可以单独指定使用哪个DNS服务器，加个参数即可：</div><div class="line">python3 dnsmasqconf2bind9zone.py --forward-to &lt;DNS服务器IP地址&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>配置 <code>named.conf</code>，在它结尾加一行:</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">include &quot;/etc/bind/named.conf.accelerated-domains-china-zone</div></pre></td></tr></table></figure>
</li>
<li><p>执行命令重启 bind9 服务：<code>systemctl restart bind9</code>.</p>
</li>
</ol>
<h1 id="附：自定义-bind-9-zone"><a href="#附：自定义-bind-9-zone" class="headerlink" title="附：自定义 bind 9 zone"></a>附：自定义 bind 9 zone</h1><p><a href="https://github.com/felixonmars/dnsmasq-china-list" title="GitHub - felixonmars/dnsmasq-china-list" target="_blank" rel="external">felixonmars/dnsmasq-china-list</a> 项目内的 <code>accelerated-domains.china.conf</code> 里难免有漏网之鱼，通过自己配置 <code>named.conf.accelerated-domains-china-zone</code> 把漏掉的添加进去就好了。格式大概是这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">zone &quot;&lt;域名&gt;&quot; IN &#123;</div><div class="line">    type forward;</div><div class="line">    forwarders &#123;</div><div class="line">        &lt;DNS服务器IP地址&gt;;</div><div class="line">    &#125;;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>然后使用 <code>systemctl reload bind9</code> 使配置生效。</p>
<p>References:</p>
<ol>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-configure-bind-as-a-caching-or-forwarding-dns-server-on-ubuntu-14-04" target="_blank" rel="external">How To Configure Bind as a Caching or Forwarding DNS Server on Ubuntu 14.04 | DigitalOcean</a></li>
<li><a href="https://github.com/felixonmars/dnsmasq-china-list" title="GitHub - felixonmars/dnsmasq-china-list" target="_blank" rel="external">felixonmars/dnsmasq-china-list</a><br> <a id="references_3"></a></li>
<li><a href="https://www.dommyet.me/dnsmasq-dnscrypt-smart-dns" title="使用 Dnsmasq 与 DNSCrypt 搭建智能 DNS" target="_blank" rel="external">使用 Dnsmasq 与 DNSCrypt 搭建智能 DNS</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://dnscrypt.org/dnscrypt.png&quot; alt=&quot;DNSCrypt&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h1&gt;&lt;p&gt;因为众所周知的原因，&lt;a href=&quot;https://zh.wikipedia.org/zh-cn/%E5%9F%9F%E5%90%8D%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%93%E5%AD%98%E6%B1%A1%E6%9F%93&quot; title=&quot;DNS缓存投毒 - Wikipedia&quot;&gt;DNS缓存投毒&lt;/a&gt;(aka: &lt;a href=&quot;https://en.wikipedia.org/wiki/DNS_spoofing&quot; title=&quot;DNS Spoofing - Wikipedia&quot;&gt;DNS Spoofing&lt;/a&gt;) 的出现是因为DNS查询通信协议的设计缺陷导致的，因为DNS查询协议的设计者当时并没有预料到现在的网络环境这么糟糕。利用这个缺陷可以实现一些特技，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用浏览器打开Google然后跳转到了Baidu.&lt;/li&gt;
&lt;li&gt;ISP(网络服务提供商, 比如 奠信 联不通 移不动, etc.)在网页里随意插入广告.&lt;/li&gt;
&lt;li&gt;这里没能列举出的一些特技.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了解决这个问题，我（不知道在什么地方什么时候意外的）发现了个软件叫做 &lt;a href=&quot;https://dnscrypt.org&quot; title=&quot;DNSCrypt homepage&quot;&gt;dnscrypt&lt;/a&gt;(&lt;a href=&quot;https://github.com/jedisct1/dnscrypt-proxy&quot; title=&quot;dnscrypt-proxy on GitHub&quot;&gt;GitHub项目主页&lt;/a&gt;)，相比传统的DNS查询有如下优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;与DNS服务器通信过程中使用SSL加密.&lt;/li&gt;
&lt;li&gt;可以强制使用TCP，避免因UDP丢包而浪费时间.&lt;/li&gt;
&lt;li&gt;有些DNS服务器不会记录用户查了哪些记录，进而也就不会知道用户去了哪些网站.&lt;/li&gt;
&lt;li&gt;有些DNS服务器支持DNSSEC，进一步加密/验证DNS查询结果.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://oing9179.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://oing9179.github.io/tags/Linux/"/>
    
      <category term="Privacy" scheme="https://oing9179.github.io/tags/Privacy/"/>
    
      <category term="bind9" scheme="https://oing9179.github.io/tags/bind9/"/>
    
      <category term="dnscrypt" scheme="https://oing9179.github.io/tags/dnscrypt/"/>
    
  </entry>
  
  <entry>
    <title>Tails - 注重隐私的Linux发行版 试用</title>
    <link href="https://oing9179.github.io/2016/08/Tails-Linux-Tryout/"/>
    <id>https://oing9179.github.io/2016/08/Tails-Linux-Tryout/</id>
    <published>2016-08-21T13:10:00.000Z</published>
    <updated>2017-02-02T10:05:17.042Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload.wikimedia.org/wikipedia/commons/9/99/Tails-logo-flat-inverted.svg"></p>
<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>前几天我浏览网页时候突然想到一件事：有没有什么办法让整个系统都通过洋葱代理，这样的话 在这个系统里不管做什么都是匿名的，而不再限于洋葱浏览器。<br>Google “anonymous linux system” 第一条就给出了 <a href="https://tails.boum.org" target="_blank" rel="external">Tails</a> 这款Linux发行版，基于Debian sid(Still in develop)。这款Linux发行版的特点是：</p>
<ol>
<li>匿名的上网：强制所有网络连接从洋葱出去。</li>
<li>使用这个系统的电脑上不会留下任何踪迹，除非你非要留下。<blockquote>
<p>不过官方文档标注了一下：虽然关机/重启时候会把内存擦一遍，但因为技术原因 没能把显存也擦一遍。不过开发团队正着手于这件事。</p>
</blockquote>
</li>
<li>自带最先进的加密工具，用来加密文件、邮件和即时通信。</li>
</ol>
<p>简单介绍了一下，下面开始下载并试用它。</p>
<a id="more"></a>
<h1 id="下载-Tails"><a href="#下载-Tails" class="headerlink" title="下载 Tails"></a>下载 Tails</h1><p>打开 <a href="https://tails.boum.org" target="_blank" rel="external">Tails 官网</a>，点击页面右边的 “Install Tails &lt;版本号&gt;”，页面跳转后 点击”Download only”，然后再点击 “Download Torrent file” 即可。</p>
<p>Q &amp; A:</p>
<blockquote>
<ol>
<li>为什么不点击那个 “LET’S START THE JOURNEY!” 大按钮?<br>我觉得那里面的教程更麻烦。（估计是给完全新手用的吧）</li>
<li>有必要进行 “Download and verify using OpenPGP” 吗?<br>如果是下载Torrent的话：没必要。因为Torrent客户端在下载完成后会自动校验文件的checksum。</li>
<li>可以使用 x雷 / xx旋风下载它吗?<br><a href="https://github.com/wereHamster/transmission" target="_blank" rel="external">Transmission</a> 或 <a href="https://github.com/deluge-torrent/deluge" target="_blank" rel="external">Deluge Torrent</a> 或者 <a href="https://github.com/qbittorrent/qBittorrent" target="_blank" rel="external">qBittorrent</a> 任选其一即可，x雷 xx旋风 之类的看看就行了。</li>
</ol>
</blockquote>
<p>下载完成后，就可以准备试用了。我在这里分别介绍 在VirtualBox里运行 和 安装到U盘。</p>
<blockquote>
<p><span style="color: red;">警告</span>：在虚拟化软件(Virtualization Software)里运行 Tails 是件很危险的事情，因为虚拟化软件所处的宿主系统(Host)和虚拟化软件都能知道你在做什么。</p>
</blockquote>
<h1 id="在-VirtualBox-里运行"><a href="#在-VirtualBox-里运行" class="headerlink" title="在 VirtualBox 里运行"></a>在 VirtualBox 里运行</h1><h2 id="虚拟机配置"><a href="#虚拟机配置" class="headerlink" title="虚拟机配置"></a>虚拟机配置</h2><p>创建一个虚拟机，需要填写的参数包括：</p>
<table>
<thead>
<tr>
<th style="text-align:left">参数名</th>
<th style="text-align:left">参数值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Name</td>
<td style="text-align:left">自己起名</td>
</tr>
<tr>
<td style="text-align:left">Type</td>
<td style="text-align:left">Linux</td>
</tr>
<tr>
<td style="text-align:left">Version</td>
<td style="text-align:left">Debian (64-bit), 32 bit 也行, 区别并不大.</td>
</tr>
<tr>
<td style="text-align:left">Memory size</td>
<td style="text-align:left">现在内存这么便宜, 怎么的也得 1GiB 起步吧.</td>
</tr>
<tr>
<td style="text-align:left">Hard disk</td>
<td style="text-align:left">如果想往虚拟机里存数据的话(比如下载东西), 那就创建一个吧.</td>
</tr>
</tbody>
</table>
<p>下面再列出一些具体的设置，下面没提到的则不用动：</p>
<table>
<thead>
<tr>
<th style="text-align:left">分类</th>
<th style="text-align:left">参数名</th>
<th style="text-align:left">参数值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Display / Screen</td>
<td style="text-align:left">Enable 3D Acceleration</td>
<td style="text-align:left">YES; 勾选后能让画面更流畅些.</td>
</tr>
<tr>
<td style="text-align:left">Storage</td>
<td style="text-align:left">Storage Tree</td>
<td style="text-align:left">把刚下载的ISO挂上去</td>
</tr>
<tr>
<td style="text-align:left">Network / Adapter 1</td>
<td style="text-align:left">Attached to</td>
<td style="text-align:left">NAT; 以后端口映射的话, 访问虚拟机能方便些.</td>
</tr>
</tbody>
</table>
<p>然后启动这个虚拟机。</p>
<p><a id="section_vbox_configure-while-logging-in"></a></p>
<h2 id="登录界面的设置"><a href="#登录界面的设置" class="headerlink" title="登录界面的设置"></a>登录界面的设置</h2><p>系统启动后会询问 “More options?”，点击 Yes 然后点击 Login。下面对需要填写的参数做简单介绍：</p>
<table>
<thead>
<tr>
<th style="text-align:left">参数名</th>
<th style="text-align:left">简介</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Administration password</td>
<td style="text-align:left">系统管理员密码, 设置后才能用 su/sudo 获得root权限.</td>
</tr>
<tr>
<td style="text-align:left">MAC address spoofing</td>
<td style="text-align:left">因为是用VBox来虚拟这个Linux，所以选不选都行.</td>
</tr>
<tr>
<td style="text-align:left">Network configuration</td>
<td style="text-align:left">不想上网请选第3个.</td>
</tr>
</tbody>
</table>
<blockquote>
<p>这里再详细说一下上面那3个参数<br>管理员密码：如果只是浏览浏览网页的话 则没必要。如果想装个软件 或者 想手动设置洋葱或者其他需要root权限的，那就得设置密码了。<br>MAC address spoofing：MAC地址里包含网卡的许多信息。如果在咖啡厅、网吧之类的公共场所用真机运行Tails，就需要设置这个了，能一定程度上减少公共网络的身份追踪。如果是在虚拟化软件里的话就没这个必要了，反正虚拟机会自动分配一个MAC地址，当然也可以在虚拟话软件的设置里改成别的，这里就不写怎么做了。<br>Network configuration：系统会自带一些洋葱地址，如果你无法连接到这些地址的话，那就选第2个就行了，能连上就选第1个。不想上网请选第3个。</p>
</blockquote>
<p>然后点击 Login 然后稍等一会儿就会出现桌面了。</p>
<h2 id="配置洋葱"><a href="#配置洋葱" class="headerlink" title="配置洋葱"></a>配置洋葱</h2><h3 id="关于配置界面"><a href="#关于配置界面" class="headerlink" title="关于配置界面"></a>关于配置界面</h3><blockquote>
<p>如果上面那一步里的 “Network configuration” 选的第2个，则需要看这一小节，否则直接跳过这小节。</p>
</blockquote>
<p>出现桌面后，会自动弹出洋葱配置界面。如果没有自动弹出来，则可能是以下原因：</p>
<ol>
<li>上面那一步里的 “Network configuration” 选的是第1个。</li>
<li>上面那一步里的 “Network configuration” 选的是第3个。这种情况的话，只能重启电脑然后不选第3个才行。</li>
<li>电脑还没连上任何网络。注意，这里的网不是指互联网(Internet)。</li>
<li>意外情况导致配置界面没能显示出来。</li>
</ol>
<p>如果配置界面没能显示出来，还是有补救办法的：</p>
<ol>
<li>在登录系统时候，需要配置好管理员密码，没配置的话请重启系统。</li>
<li>点击屏幕左上角 <code>Applications -&gt; Utilities -&gt; Terminal</code>，这会打开终端(Terminal)程序。</li>
<li>输入命令 <code>sudo tor-launcher</code> 然后回车，然后输入密码 然后回车。</li>
</ol>
<h3 id="具体配置洋葱"><a href="#具体配置洋葱" class="headerlink" title="具体配置洋葱"></a>具体配置洋葱</h3><ol>
<li>界面上主要有2个按钮分别是 <code>Connect</code> 和 <code>Configure</code>，直接选第2个即可.</li>
<li>选 Yes 然后点击 Next.</li>
<li>填写自己收藏的桥，然后点击 Next.</li>
<li>看情况选择 Yes 或 No，选 No 则跳到第6步.</li>
<li>看着填写就行了.</li>
<li>点击 <code>Connect</code>.</li>
<li>可选步骤：更多的洋葱信息，点击桌面右上角通知栏里的洋葱图标即可。</li>
</ol>
<p>连接成功后，就可以在桌面左上角的 Application 里打开洋葱浏览器了。</p>
<h1 id="在真机上运行"><a href="#在真机上运行" class="headerlink" title="在真机上运行"></a>在真机上运行</h1><p>有些时候比如去咖啡厅/网吧，就需要在真机上运行Tails来保护隐私安全。</p>
<h2 id="安装Tails到U盘"><a href="#安装Tails到U盘" class="headerlink" title="安装Tails到U盘"></a>安装Tails到U盘</h2><p>准备工作：</p>
<ul>
<li>一个U盘不小于2G（想在上面放其他东西就需要更大的空间）</li>
<li>一个Tails发行版的ISO文件</li>
<li>(*1) 一台Windows电脑/虚拟机</li>
<li>(*1) <a href="http://www.pendrivelinux.com/universal-usb-installer-easy-as-1-2-3/" target="_blank" rel="external">Universal USB Installer</a>，简称 UUI.</li>
</ul>
<blockquote>
<p>*1：可选项。如果使用linux的 <code>dd</code> 把iso写到U盘上的话则不需要这两个。如果dd不好使的话，那就需要这两个了。<br>附 <code>dd</code> 命令例子： <code>dd bs=4M if=/path/to/tails.iso of=/dev/sdXn status=progress &amp;&amp; sync</code>，记得替换掉里面的 <code>Xn</code> 为自己的U盘设备路径。</p>
</blockquote>
<p>下面讲解具体步骤：</p>
<ol>
<li>格式化U盘为 FAT32 或 NTFS 文件系统。或者手动给U盘分区 如果还想在U盘里放其他东西的话.</li>
<li>运行UUI，点击 <code>I Agree</code>.</li>
<li>在UUI界面里的 ‘Step 1’ 的下拉列表框里选择 ‘Tails’(在 ‘Other Distros Alphabetical’ 里).</li>
<li>然后在 ‘Step 2’ 里选择 Tails 的iso.</li>
<li>然后在 ‘Step 3’ 里选择格式化好的U盘，右边的 ‘Format …’ 不用勾选。</li>
<li>然后点击 <code>Create</code>，然后点击 <code>Yes</code>。</li>
<li>稍等片刻，Tails就装好了。</li>
</ol>
<h2 id="配置洋葱-1"><a href="#配置洋葱-1" class="headerlink" title="配置洋葱"></a>配置洋葱</h2><p>和在虚拟化软件里的配置方法是一样的，参见 <a href="#section_vbox_configure-while-logging-in">登录界面的配置</a>。</p>
<h1 id="关于在咖啡厅-网吧使用前需要登录"><a href="#关于在咖啡厅-网吧使用前需要登录" class="headerlink" title="关于在咖啡厅/网吧使用前需要登录"></a>关于在咖啡厅/网吧使用前需要登录</h1><p>大多数咖啡厅/网吧的公共WiFi需要先登录后才能连接互联网。Tails考虑到了这一点，使用’不安全浏览器’ 即可不通过洋葱上网。<br>不安全浏览器可以在这里找到：<code>桌面左上角 Applications -&gt; Internet -&gt; Unsafe Browser</code>。<br><strong>注意：不要乱用不安全浏览器！</strong></p>
<h1 id="安装-openssh-和-openssh-sftp"><a href="#安装-openssh-和-openssh-sftp" class="headerlink" title="安装 openssh 和 openssh-sftp"></a>安装 openssh 和 openssh-sftp</h1><p>有时候需要远程操作Tails，或者Tails运行在虚拟机里需要传一些文件，这时候就需要 openssh 和 sftp 了.</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol>
<li><p>打开 Terminal，运行命令：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install openssh-server openssh-sftp-server</div></pre></td></tr></table></figure>
<p> 当然也可以只下载deb包，以便在没有网的时候用。下载完成后会放在 <code>/var/cache/apt/archives/</code> 下.</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get --download-only install openssh-server openssh-sftp-server</div></pre></td></tr></table></figure>
</li>
<li><p>配置openssh，配置文件在 <code>/etc/ssh/sshd_config</code></p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># 将 &apos;Port&apos; 改为其他数字(1025~65535)，防止不安全的网络里有人攻击 22 端口。</div><div class="line"># 这里以端口号 23456 作为例子。</div><div class="line">Port 23456</div></pre></td></tr></table></figure>
</li>
<li><p>配置 iptables<br>执行命令，允许外界连接sshd的端口：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iptables -I INPUT 1 -p tcp --dport 23456 -j ACCEPT</div></pre></td></tr></table></figure>
</li>
<li><p>配置 <code>/etc/hosts.allow</code><br>直接加一行 <code>sshd: ALL</code> 即可.</p>
</li>
<li>重启sshd服务 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">systemctl restart sshd</div><div class="line"># 如果上面这条命令出错这执行下面这个</div><div class="line">systemctl restart ssh</div></pre></td></tr></table></figure>
</li>
</ol>
<p>完成上面的步骤后，就可以使用 <code>ssh -p 23456 username@host</code> 连接Tails了。</p>
<h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><ol>
<li>不安全浏览器无法浏览网页<br>请考虑不启用 “MAC address spoofing”，这只能在登录界面设置。</li>
<li>连不上洋葱<br>设置系统时间/时区为当前的时间/时区，但这需要先设置好系统管理员密码。</li>
<li>我在虚拟机里运行。桥太长了，我想复制粘贴。<br>在主机里创建文本文件并把桥写进去，然后用 sftp 把文件 <code>put</code> 到虚拟机。可能需要对虚拟机设置端口转发。</li>
<li>系统开着放在那里好久没用，回来发现连不上洋葱了。<br>运行命令 <code>sudo systemctl restart tor</code>.</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/9/99/Tails-logo-flat-inverted.svg&quot;/&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h1&gt;&lt;p&gt;前几天我浏览网页时候突然想到一件事：有没有什么办法让整个系统都通过洋葱代理，这样的话 在这个系统里不管做什么都是匿名的，而不再限于洋葱浏览器。&lt;br&gt;Google “anonymous linux system” 第一条就给出了 &lt;a href=&quot;https://tails.boum.org&quot;&gt;Tails&lt;/a&gt; 这款Linux发行版，基于Debian sid(Still in develop)。这款Linux发行版的特点是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;匿名的上网：强制所有网络连接从洋葱出去。&lt;/li&gt;
&lt;li&gt;使用这个系统的电脑上不会留下任何踪迹，除非你非要留下。&lt;blockquote&gt;
&lt;p&gt;不过官方文档标注了一下：虽然关机/重启时候会把内存擦一遍，但因为技术原因 没能把显存也擦一遍。不过开发团队正着手于这件事。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;自带最先进的加密工具，用来加密文件、邮件和即时通信。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;简单介绍了一下，下面开始下载并试用它。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://oing9179.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://oing9179.github.io/tags/Linux/"/>
    
      <category term="Tails Linux" scheme="https://oing9179.github.io/tags/Tails-Linux/"/>
    
      <category term="Tor" scheme="https://oing9179.github.io/tags/Tor/"/>
    
      <category term="Anonymous" scheme="https://oing9179.github.io/tags/Anonymous/"/>
    
      <category term="Privacy" scheme="https://oing9179.github.io/tags/Privacy/"/>
    
  </entry>
  
  <entry>
    <title>Markdown Navigator(Multi Markdown) for IntelliJ IDEA 破解</title>
    <link href="https://oing9179.github.io/2016/08/Markdown-Navigator-for-IntelliJ-IDEA-Crack/"/>
    <id>https://oing9179.github.io/2016/08/Markdown-Navigator-for-IntelliJ-IDEA-Crack/</id>
    <published>2016-08-08T05:29:00.000Z</published>
    <updated>2017-02-02T09:48:21.434Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload.wikimedia.org/wikipedia/commons/4/48/Markdown-mark.svg"></p>
<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>一直以来我都在寻找一款功能齐全 Markdown 编辑器，目前功能最全的是一款叫做 <code>MarkdownPad</code> 的编辑器，可惜的是它只能运行在Windows上。后来在 IDEA 的插件市场找到了这款Markdown编辑器，叫做 <a href="https://plugins.jetbrains.com/plugin/7896?pr=idea" target="_blank" rel="external">Markdown Navigator(原名为 Multi Markdown)</a>，插件基本功能免费，一些特别的功能（比如 开启Markdown预览）就需要购买许可了，于是干脆把它也破掉吧。</p>
<a id="more"></a>
<h1 id="开工"><a href="#开工" class="headerlink" title="开工"></a>开工</h1><h2 id="先弄个试用版的许可证激活一下看看"><a href="#先弄个试用版的许可证激活一下看看" class="headerlink" title="先弄个试用版的许可证激活一下看看"></a>先弄个试用版的许可证激活一下看看</h2><p>插件原价为 $19.99/yr，直接到 <a href="https://vladsch.com/product/markdown-navigator/try" target="_blank" rel="external">这里</a> 填好相关资料就可以拿到15天的全功能试用许可证了。<br>然后对 LicenseAgent 类的 <code>getLicenseCode(LicenseRequest licenseRequest)Z</code> 和 <code>isValidActivation()Z</code> 下断点，然后调试该插件。<br>调试时，打开 <code>被调试的IDEA的菜单栏 -&gt; File -&gt; Settings -&gt; Languages &amp; Frameworks -&gt; Markdown</code>，输入许可证，然后观察LicenseAgent类里的代码执行过程，得到下面的大致激活流程。</p>
<h2 id="大致的激活流程"><a href="#大致的激活流程" class="headerlink" title="大致的激活流程"></a>大致的激活流程</h2><p>插件先拿着试用版激活码调用 <code>LicenseAgent.getLicenseCode(LicenseRequest)Z</code>，这会从服务器拿到激活响应以json体现：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"status"</span>:<span class="string">"LicenseAgent.STATUS_*"</span>,</div><div class="line">  <span class="attr">"message"</span>:<span class="string">"比如激活失败就会用这个来告诉用户."</span>,</div><div class="line">  <span class="attr">"activation_code"</span>:<span class="string">"激活响应信息"</span>,</div><div class="line">  <span class="attr">"license_code"</span>:<span class="string">"猜测：服务器要求插件更新许可证用的字段，不一定每次都有."</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下表描述上面的json里key对应的java字段：</p>
<table>
<thead>
<tr>
<th style="text-align:left">key</th>
<th style="text-align:left">java field</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>status</code></td>
<td style="text-align:left">LicenseAgent.STATUS</td>
</tr>
<tr>
<td style="text-align:left"><code>message</code></td>
<td style="text-align:left">LicenseAgent.MESSAGE</td>
</tr>
<tr>
<td style="text-align:left"><code>activation_code</code></td>
<td style="text-align:left">LicenseAgent.ACTIVATION_CODE</td>
</tr>
<tr>
<td style="text-align:left"><code>license_code</code></td>
<td style="text-align:left">LicenseAgent.LICENSE_CODE</td>
</tr>
</tbody>
</table>
<p>下表描述上面的json里 <code>status</code> 的值对应的java字段：</p>
<table>
<thead>
<tr>
<th style="text-align:left">status</th>
<th style="text-align:left">java field</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>ok</code></td>
<td style="text-align:left">LicenseAgent.STATUS_OK</td>
<td style="text-align:left">激活成功</td>
</tr>
<tr>
<td style="text-align:left"><code>error</code></td>
<td style="text-align:left">LicenseAgent.STATUS_ERROR</td>
<td style="text-align:left">激活失败</td>
</tr>
<tr>
<td style="text-align:left"><code>disable</code></td>
<td style="text-align:left">LicenseAgent.STATUS_DISABLE</td>
<td style="text-align:left">服务器要求删除本地许可信息</td>
</tr>
</tbody>
</table>
<p>然后把 <code>activation_code</code> 和 <code>license_code</code>(如果存在的话)一并存入到LicenseAgent的 <code>activation_code</code> 和 <code>license_code</code> 字段里.</p>
<p>之后再调用 <code>LicenseAgent.isValidActivation()Z</code>，逻辑大概这样：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// activation_code：String, 服务器响应的加密后的json字符串.</span></div><div class="line"><span class="comment">// activation：JsonObject, 解密后的 activation_code.</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidActivation</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (activation_code != <span class="keyword">null</span>) &#123; <span class="comment">// 某些原因导致没能拿到加密的激活信息.</span></div><div class="line">        <span class="keyword">if</span> (activation == <span class="keyword">null</span>) &#123; <span class="comment">// json字符串还未解密成json对象, activation 才会null.</span></div><div class="line">            activation = 转为JSON对象(解密(activation_code));</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (activation != <span class="keyword">null</span> activation.agent_signature.equals(LicenseAgent.agent_signagure)) &#123;</div><div class="line">            取出json里的信息;<span class="comment">// 比如激活时间、过期时间、激活了哪些高级特性。</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;<span class="comment">// 返回激活成功.</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;<span class="comment">// 返回激活失败.</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面的代码为 <code>activation</code> json对象里的相关字段信息：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  "product_name": "idea-multimarkdown",</div><div class="line">  "product_version": "2.0.0",</div><div class="line">  "agent_signature": "475f99b03f6ec213729d7f5d577c80aa",// LicenseAgent.agent_signature</div><div class="line">  "host_name": "电脑或者主机的名称",</div><div class="line">  "host_product": "IDEA的build号",</div><div class="line">  "license_expires": "2016-08-22", // 许可证过期日期</div><div class="line">  "license_type": "trial",/* 许可类型, LicensedFeature.Feature */</div><div class="line">  "license_features": 1,/* LicensedFeature.Feature (暂定) */</div><div class="line">  "feature_list": &#123;/* 开启了哪些高级特性, MultiMarkdownPlugin.FEATURE_*; */</div><div class="line">    "enhanced": 1,</div><div class="line">    "development": 2</div><div class="line">  &#125;,</div><div class="line">  "activated_on": "2016-08-07", // 激活日期</div><div class="line">  "activation_expires": "2016-08-22" // 过期日期</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="LicenseAgent-类"><a href="#LicenseAgent-类" class="headerlink" title="LicenseAgent 类"></a><code>LicenseAgent</code> 类</h2><p>直接定位到 <code>LicenseAgent</code> 类然后进行如下修改：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LicenseAgent</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LicenseAgent</span><span class="params">()</span> </span>&#123;<span class="comment">// 启用各种付费后的特性</span></div><div class="line">        <span class="comment">// MultiMarkdownPlugin.FEATURE_*</span></div><div class="line">        featureList = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">        featureList.put(<span class="string">"enhanced"</span>, <span class="number">1</span>);</div><div class="line">        featureList.put(<span class="string">"development"</span>, <span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LicenseAgent</span><span class="params">(LicenseAgent other)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>();<span class="comment">// 这个构造函数里也要调用一下.</span></div><div class="line">        updateFrom(other);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLicenseCode</span><span class="params">(String license_code)</span> </span>&#123;</div><div class="line">        <span class="comment">// 置空</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLicenseActivationCodes</span><span class="params">(String license_code, String activation_code)</span> </span>&#123;</div><div class="line">        <span class="comment">// 置空</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setActivationCode</span><span class="params">(String activation_code)</span> </span>&#123;</div><div class="line">        <span class="comment">// 置空</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLicenseExpires</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"2999-12-31"</span>;<span class="comment">// 改成2999年才过期</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 该方法会用之前申请到的试用版许可证向服务器请求激活信息</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getLicenseCode</span><span class="params">(LicenseRequest licenseRequest)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidLicense</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidActivation</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLicenseType</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"license"</span>; <span class="comment">// LicensedFeature.Feature.LICENSE;</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLicenseFeatures</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 这个返回值暂定为这个，因为编译后 插件认为激活成功。</span></div><div class="line">        <span class="keyword">return</span> LicensedFeature.Feature.LICENSE.getLicenseFlags();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLicenseExpiration</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"2999-12-31"</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getActivatedOn</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"1900-01-01"</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLicenseExpiringIn</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Integer.MAX_VALUE;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isActivationExpired</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 其余的上面没提到的方法暂时都不用管.</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>到目前为止，破解工作已经完成了。我发现 <code>LicenseRequest</code> 类会收集一点系统信息，于是干脆把它也搞定吧。</p>
<h2 id="LicenseRequest-类"><a href="#LicenseRequest-类" class="headerlink" title="LicenseRequest 类"></a><code>LicenseRequest</code> 类</h2><p>方法很简单：在构造函数里把所有对 <code>host_</code> 开头的字段全都改成别的就行了。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>编译代码并替换原版插件jar里对应的类，然后替换掉IDEA的原版jar，然后重启IDEA，破解完成。</p>
<p><strong>References:</strong></p>
<ol>
<li><a href="http://www.jianshu.com/p/b70e250bed37" target="_blank" rel="external">http://www.jianshu.com/p/b70e250bed37</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/4/48/Markdown-mark.svg&quot;/&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h1&gt;&lt;p&gt;一直以来我都在寻找一款功能齐全 Markdown 编辑器，目前功能最全的是一款叫做 &lt;code&gt;MarkdownPad&lt;/code&gt; 的编辑器，可惜的是它只能运行在Windows上。后来在 IDEA 的插件市场找到了这款Markdown编辑器，叫做 &lt;a href=&quot;https://plugins.jetbrains.com/plugin/7896?pr=idea&quot;&gt;Markdown Navigator(原名为 Multi Markdown)&lt;/a&gt;，插件基本功能免费，一些特别的功能（比如 开启Markdown预览）就需要购买许可了，于是干脆把它也破掉吧。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://oing9179.github.io/categories/Java/"/>
    
    
      <category term="Intellij IDEA" scheme="https://oing9179.github.io/tags/Intellij-IDEA/"/>
    
      <category term="CRACK" scheme="https://oing9179.github.io/tags/CRACK/"/>
    
      <category term="Markdown" scheme="https://oing9179.github.io/tags/Markdown/"/>
    
      <category term="Multi Markdown" scheme="https://oing9179.github.io/tags/Multi-Markdown/"/>
    
      <category term="Markdown Navigator" scheme="https://oing9179.github.io/tags/Markdown-Navigator/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis Plus for IntelliJ IDEA 破解</title>
    <link href="https://oing9179.github.io/2016/07/Mybatis-Plus-for-IntelliJ-IDEA-Crack/"/>
    <id>https://oing9179.github.io/2016/07/Mybatis-Plus-for-IntelliJ-IDEA-Crack/</id>
    <published>2016-07-20T11:25:00.000Z</published>
    <updated>2017-02-02T09:46:47.099Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://mybatis.github.io/images/mybatis-logo.png"></p>
<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>前天发现了个不错的插件，叫 <a href="https://www.codesmagic.com/mybatis" target="_blank" rel="external">Mybatis Plus</a>，是一个 IntelliJ IDEA 插件，用于协助编写使用MyBatis的程序。<br>插件官网上还给出了使用插件的 <a href="https://www.youtube.com/watch?v=jLisFKsU52A&amp;list=PLAswK8OvyF9fOyW1iXIuwxgt4FEJHR4B9" target="_blank" rel="external">效果视频</a>，感觉这插件能大大提升开发效率，于是安装它打算试试。<br>不料，安装后发现插件不允许试用，只能先购买后使用。于是我查了一些资料，试着自己处理掉DRM。</p>
<a id="more"></a>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>按照 <a href="#references_1">引用1</a> 和 <a href="#references_2">引用2</a> 的方法，使用 <a href="http://set.ee/jbe/" target="_blank" rel="external">jbe</a> 直接修改类字节码。不过jbe貌似有bug，每次保存方法以后都会丢失一些信息（比如 保存Method body的字节码后，Method里 堆(Stack)的最大高度之类的信息就丢失了），导致IDEA载入这个插件的时候抛出载入类文件异常。<br>于是我改用 <a href="http://jd.benow.ca/" target="_blank" rel="external">jd-gui</a> 结合IntelliJ IDEA自带的Decompiler，反编译出原有的java代码，然后手动修改代码使其通过编译检查。<br><strong>注意：每次修改代码后都进行编译，然后将编译后的类文件替换掉原来的jar包里的类文件，最后重启IDEA看效果和调试输出。</strong></p>
<h1 id="开工"><a href="#开工" class="headerlink" title="开工"></a>开工</h1><h2 id="作为切入点的两个类：JavaService-和-JavaUtil"><a href="#作为切入点的两个类：JavaService-和-JavaUtil" class="headerlink" title="作为切入点的两个类：JavaService 和 JavaUtil"></a>作为切入点的两个类：<code>JavaService</code> 和 <code>JavaUtil</code></h2><p>先从 <a href="#references_1">引用1</a> 和 <a href="#references_2">引用2</a> 中所提到的两个类下手：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">com.seventh7.mybatis.service.JavaService</div><div class="line">com.seventh7.mybatis.util.JavaUtil</div></pre></td></tr></table></figure>
<p>用IDEA新建一个Java项目，并在 Project Structure 里选择 IntelliJ Platform Plugin SDK。没有这个选项就创建一个即可，如下图：</p>
<p><img src="Project_SDK_for_IDEA_plugin.jpg" alt="Project SDK for IDEA plugin.jpg"></p>
<p>整个java项目的文件结构如下：</p>
<p><img src="Project_File_Structure.jpg" alt="Project file structure.jpg"></p>
<table>
<thead>
<tr>
<th>目录</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>/libs/</td>
<td>插件的原版jar包和它引用的一些包</td>
</tr>
<tr>
<td>/src/main/java/</td>
<td>按照原版jar包里的包结构创建,<br>用于替换原版jar包里的类.</td>
</tr>
<tr>
<td>/src/main/resources/</td>
<td>目前只存放 MANIFEST.MF， 用于记录原版jar包对应的版本号.</td>
</tr>
</tbody>
</table>
<p><strong>图中还有一些上面没有提到过的类，这些类以后会用到。只用这一张图也省得我再做其他的图了。</strong></p>
<h3 id="先从-JavaUtils-类下手好了"><a href="#先从-JavaUtils-类下手好了" class="headerlink" title="先从 JavaUtils 类下手好了"></a>先从 <code>JavaUtils</code> 类下手好了</h3><p>先把类反编译出来放到对应的包下面。反编译的类一般都会有些编译错误，导致这些错误的原因包括但不限于：</p>
<ol>
<li>Java泛型的类型擦除。</li>
<li>类型强制转换时候的 Unchecked 警告。</li>
<li>反编译工具不完善，没能及时更新。</li>
</ol>
<p>泛型类型擦除这个比较好解决，根据IDE的提示猜出对应的泛型类型就好。猜不出来就先不用泛型，看运行时的异常再决定用什么类型。<br><strong>以编译通过为基础，尽可能减少可能会导致运行时异常的代码，其他不会导致运行时异常的就不要管它。</strong></p>
<p>按照 <a href="#references_2">引用2</a> 的说明，对 <code>refVaild()Z</code> 做修改。修改前：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">refValid</span><span class="params">()</span> </span>&#123; <span class="comment">// Line #194</span></div><div class="line">	<span class="keyword">if</span>(!validated) &#123;</div><div class="line">		validated = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			String e = MybatisSetting.getInstance().getKey();</div><div class="line">			String result = MybatisSetting.getInstance().getResult();</div><div class="line">			<span class="keyword">if</span>(!StringUtils.isBlank(e) &amp;&amp; !StringUtils.isBlank(result)) &#123;</div><div class="line">				Key publicKey = Codec.loadKey(e);</div><div class="line">				Codec.decrypt(publicKey, Hexs.toBytes(result));</div><div class="line">				valid = <span class="keyword">true</span>;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				valid = <span class="keyword">false</span>;</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception var3) &#123;</div><div class="line">			valid = <span class="keyword">false</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> valid;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修改后：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">refValid</span><span class="params">()</span> </span>&#123;</div><div class="line">    validated = <span class="keyword">true</span>; <span class="comment">// 用于判断 refVaild()Z 是否被调用过了.</span></div><div class="line">    valid = <span class="keyword">true</span>; <span class="comment">// 用于判断DRM是否通过.</span></div><div class="line">    <span class="keyword">return</span> valid;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后我又添加了个 <code>public static String printStackTrace(String message)</code>，调用后会像java抛出异常信息一样在 <code>System.err</code> 打印出调用堆。只不过这个方法只打印这个插件所在java包的信息，其余的不打印。这样，我就可以在任意地方插入调用这个方法的代码，然后从IDEA的标准输出里观察调试信息。代码很简单，我就不贴了。</p>
<p>好奇心驱使，我又翻了翻这个类，发现又有个内部类叫 <code>public static class SystemData</code>，负责收集系统的各种信息，比如 系统什么名字、用的什么JVM。有个方法叫 <code>public static synchronized JavaUtils.SystemData getInstance()</code>，负责初始化一个 <code>SystemData</code> 类的实例，直接修改它就能免除系统信息被收集。</p>
<h3 id="然后是-JavaService-类"><a href="#然后是-JavaService-类" class="headerlink" title="然后是 JavaService 类"></a>然后是 <code>JavaService</code> 类</h3><p>直接修改 <code>stop()V</code> 和 <code>stopped()Z</code> 即可，像下面这样：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">stopped</span><span class="params">()</span> </span>&#123; <span class="comment">// Line #204</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123; <span class="comment">//Line #208</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在修改的过程中发现了一个 <code>LicenseData.EMPYT</code>。这个类名就很可疑，加上原来的代码好像想要把许可信息置空：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">MybatisSetting.getInstance().setLicenseData(LicenseData.EMPTY); <span class="comment">// Line #212</span></div></pre></td></tr></table></figure>
<p>于是干脆进去看看这个类有什么蹊跷。</p>
<h2 id="探索-LicenseData-类"><a href="#探索-LicenseData-类" class="headerlink" title="探索 LicenseData 类"></a>探索 <code>LicenseData</code> 类</h2><p>其实这个类直到后来我才重视它，不过他也没有太大的重要性。我直接把需要修改的地方标注出来好了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 原来的 EMPTY 定义，简而言之就是没有填写 key 和 result。</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> LicenseData EMPTY = <span class="keyword">new</span> LicenseData(<span class="string">""</span>, <span class="string">""</span>);</div><div class="line"><span class="comment">// 随便给它个key和result就好，反正DRM的验证部分在 `JavaUtils.refVaild()Z` 已经被搞定了。</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> LicenseData EMPTY = <span class="keyword">new</span> LicenseData(<span class="string">"fake_key"</span>, <span class="string">"fake_result"</span>);</div></pre></td></tr></table></figure>
<p>然后是 <code>getType()Ljava/lang/reflect/Type;</code>。在之后的逆向过程中发现 这个Method很可能是方便Gson反序列化用的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 原来的:</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Type <span class="title">getType</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> TypeToken() &#123; &#125;.getType();</div><div class="line">&#125;</div><div class="line"><span class="comment">// 修改成:</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Type <span class="title">getType</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> TypeToken&lt;LicenseData&gt;() &#123; &#125;.getType();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="与-LicenseData-相邻的包和类"><a href="#与-LicenseData-相邻的包和类" class="headerlink" title="与 LicenseData 相邻的包和类"></a>与 <code>LicenseData</code> 相邻的包和类</h2><p>既然挖到DRM部分了，那当然要好好看一看还有什么东西了。下面列出 <code>com.seventh7.mybatis.ref</code> 包下各个类的作用：</p>
<table>
<thead>
<tr>
<th>包/类名</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>.http</code></td>
<td>HTTP库</td>
</tr>
<tr>
<td><code>.license.ActivationDriver</code></td>
<td>访问插件服务器, 查询key对应的激活信息.</td>
</tr>
<tr>
<td><code>.license.ActivationResult</code></td>
<td>联网验证key后得到的结果(成功或者失败).</td>
</tr>
<tr>
<td><code>.license.LicenseData</code></td>
<td>许可证信息, 包含 key 和激活结果.</td>
</tr>
<tr>
<td><code>.license.RefConfigurable</code></td>
<td>提供一个UI(文本框)输入key, 以此来激活插件.</td>
</tr>
<tr>
<td><code>.CmProject</code></td>
<td>IDEA载入一个Project后会调用 <code>initComponent()V</code>,<br>而这个插件的作用就是 每当载入项目时前都向服务器上报key、激活信息以及系统信息.</td>
</tr>
<tr>
<td><code>.RefProject</code></td>
<td>负责通过IDEA发布通知, 告诉用户该激活了.</td>
</tr>
<tr>
<td><code>.Uris</code></td>
<td>与服务器通信要用到的一些URL.</td>
</tr>
</tbody>
</table>
<p>下面，一步一步的来解决DRM和信息上报问题。</p>
<h3 id="AcitvationDriver-类和-ActivationResult-类"><a href="#AcitvationDriver-类和-ActivationResult-类" class="headerlink" title="AcitvationDriver 类和 ActivationResult 类"></a><code>AcitvationDriver</code> 类和 <code>ActivationResult</code> 类</h3><p><code>ActivationDriver</code> 类只有一个静态方法 <code>ActivationResult activate(String licenseKey)</code>。方法里的代码很简单：拿key询问服务器是否有效。有效的话 方法就返回一个激活成功的信息，反之 返回激活失败的信息。</p>
<p><code>ActivationDriver.activate(String licenseKey)</code> 返回的是一个 <code>ActivationResult</code> 类，这个类有两个工厂方法（Factory Method）: <code>success(LicenseData licenseData)</code> 和 <code>fail(String messsage)</code>。于是 只需要对 <code>ActivationDriver</code> 进行修改就好了。</p>
<blockquote>
<p>为何不直接对 <code>ActivationResult</code> 进行修改，使其永远返回激活成功? 因为:</p>
<ol>
<li>这个类比 <code>ActivationDriver</code> 复杂一些，所以改起来没有 <code>ActivationDriver</code> 简单。</li>
<li>以后插件开发者再往代码的其他地方散布DRM时候，如果又用到这个类了，也方便以后再排查出来。</li>
</ol>
</blockquote>
<p>修改后的 <code>ActivationDriver</code> 很简单:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivationDriver</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ActivationResult <span class="title">activate</span><span class="params">(String licenseKey)</span> </span>&#123;</div><div class="line">        <span class="comment">// 因为 LicenseData.EMPTY 已经被改过了，于是这里直接用就行。</span></div><div class="line">        <span class="keyword">return</span> ActivationResult.success(LicenseData.EMPTY);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="屏蔽-CmProject-类向服务器上报各种信息"><a href="#屏蔽-CmProject-类向服务器上报各种信息" class="headerlink" title="屏蔽 CmProject 类向服务器上报各种信息"></a>屏蔽 <code>CmProject</code> 类向服务器上报各种信息</h3><p>方法也非常简单，在对应的包下面新建同名类并实现 <code>com.intellij.openapi.components.ProjectComponent</code> 接口，代码如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.seventh7.mybatis.ref;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.intellij.openapi.components.ProjectComponent;</div><div class="line"><span class="keyword">import</span> org.jetbrains.annotations.NotNull;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CmProject</span> <span class="keyword">implements</span> <span class="title">ProjectComponent</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initComponent</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 原来的类在这里进行信息上报，于是这里什么也不做。</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@NotNull</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getComponentName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 和原来的类一样，该返回啥返回啥。</span></div><div class="line">        <span class="keyword">return</span> <span class="string">"CmProject"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 其他要实现的方法的方法体里全都放空。</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在修改 <code>CmProject</code> 之前我看了看这个类的代码，代码里除了HTTP通信以外，还与一个叫 <code>MybatisSettings</code> 的类在打交道。下面就开始对这个类进行研究和修改。</p>
<h2 id="探索-MybatisSettings-类"><a href="#探索-MybatisSettings-类" class="headerlink" title="探索 MybatisSettings 类"></a>探索 <code>MybatisSettings</code> 类</h2><p>这个类位于 <code>com.seventh7.mybatis.settings</code> 包里，负责读写插件的配置信息，比如 key 和一些插件的设置都会在这里进行存取。</p>
<blockquote>
<p>不过，后来又发现还有个地方会读取配置信息而不经过这个类。</p>
</blockquote>
<p>经过一番代码阅读，挑出了5个比较显眼的方法，并分别插入 <code>printStackTrace(String message)</code>，看看还有谁会通过它读写许可信息。</p>
<ul>
<li><code>String getKey()</code></li>
<li><code>void setKey(String key)</code></li>
<li><code>String getResult()</code></li>
<li><code>void setResult(String result)</code></li>
<li><code>void setLicenseData(LicenseData licenseData)</code></li>
</ul>
<p>这里值得说一下的是，<code>setKey(String key)</code> 方法做了点儿小工作：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 原来的代码:</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKey</span><span class="params">(String key)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.key = key;</div><div class="line">    <span class="comment">// 如果key是null或者是空字符串，那就 ++insert。</span></div><div class="line">    <span class="keyword">if</span>(StringUtils.isBlank(<span class="keyword">this</span>.key)) &#123;</div><div class="line">        ++<span class="keyword">this</span>.insert;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 修改后:</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKey</span><span class="params">(String key)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (StringUtils.isBlank(key)) &#123;</div><div class="line">        <span class="keyword">this</span>.key = <span class="string">"fake_key"</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">this</span>.key = key;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>经过一番查找后发现，在IDEA提供给插件粗放配置文件的地方（在 <code>~/.IntelliJIdea&lt;版本号&gt;/config/options/</code>），这个类在管理一个文件来存放插件的配置信息，文件名为 <code>mybatis.xml</code>。文件内容大致像下面这样，我只挑出重点的部分贴出来：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">application</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">KEY</span>=<span class="string">""</span> <span class="attr">RESULT</span>=<span class="string">""</span> <span class="attr">Insert</span>=<span class="string">"6"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这样，上面那个 <code>++this.insert</code> 就能解释清楚了：每当输入的key为空的时候，就吧 <code>Insert</code> 的值 +1。至于插件开发者为何这么做，本文后面会提到。<br>替换掉jar包类文件，然后重启IDEA并观察调试输出。发现一个叫 <code>Utils$MLicenseValidator</code> 的类调用了 <code>setLicenseData()</code> 方法，看来我又发现了其他隐藏起来的DRM验证了。</p>
<h2 id="探索-Utils-MLicenseValidator-类"><a href="#探索-Utils-MLicenseValidator-类" class="headerlink" title="探索 Utils$MLicenseValidator 类"></a>探索 <code>Utils$MLicenseValidator</code> 类</h2><p>这个内部类位于 <code>com.seventh7.mybatis.generate0.Utils$MLicenseValidator</code>，不过类的内容很简单。下面贴出修改后的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MLicenseValidator</span> <span class="keyword">implements</span> <span class="title">LicenseValidator</span> </span>&#123; <span class="comment">// Line #79</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validateLicense</span><span class="params">(License license)</span> <span class="keyword">throws</span> InvalidLicenseException </span>&#123;</div><div class="line">        <span class="comment">// 只是简单的设置成"空许可证"即可.</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            MybatisSetting.getInstance().setLicenseData(LicenseData.EMPTY);</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException ignore) &#123;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="尝试关掉IDEA的-Completion-类"><a href="#尝试关掉IDEA的-Completion-类" class="headerlink" title="尝试关掉IDEA的 Completion 类"></a>尝试关掉IDEA的 <code>Completion</code> 类</h2><p>到目前为止，经过上面的代码修改后，看上去应该没有DRM验证的部分了。于是我覆盖掉原来jar包里的类，然后启动IDEA看效果。<br>IDEA启动后刚载入好java文件，就提示我”你确定要退出IDEA吗?”。我记得我没点关闭啊，于是我点Cancel，不到1秒又蹦出来了。我反反复复点了几次Cancel，IDEA一直弹出是否退出的对话框。看来肯定是这个插件搞的鬼了。<br>于是我打开jd-gui并载入这个插件的jar包，然后使用搜索 <code>quit</code> <code>exit</code> 之类的关键字。幸运的是我很快就找到了导致IDEA会退出的代码。<br>这段代码位于 <code>com.seventh7.mybatis.dom.model.Completion</code>。代码内容也很简单：判断插件配置文件里的 <code>Insert</code> 是否大于5，并且 能否在IDEA里找到这个插件的ID（也就意味着插件载入到IDEA了）。条件符合的话就删掉一个类文件（<code>com.seventh7.mybatis.definitionsearch.MapperDefinitionSearch$1</code>），然后不断的提示要求退出IDEA。这样，当下次启动IDEA的时候，插件会因为缺少类文件而无法工作。<br>解决方法也很简单：创建同名类并继承 <code>Thread</code> 类，覆盖 <code>run()V</code> 并且该方法内不写任何代码。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>经过两天的周折，终于把这个插件搞定了。</p>
<p><strong>更新(2016-08-08)：Rover12421用JavaAgent写了个破解工具</strong><br>项目地址：<a href="https://coding.net/u/rover12421/p/MyBatisPluginCrack" target="_blank" rel="external">https://coding.net/u/rover12421/p/MyBatisPluginCrack</a></p>
<p><a id="references"></a> <strong>References:</strong><br><a id="references_1"></a>1. <a href="http://blog.lanyus.com/archives/178.html" target="_blank" rel="external">http://blog.lanyus.com/archives/178.html</a><br><a id="references_2"></a>2. <a href="http://blog.lanyus.com/archives/115.html" target="_blank" rel="external">http://blog.lanyus.com/archives/115.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://mybatis.github.io/images/mybatis-logo.png&quot; /&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h1&gt;&lt;p&gt;前天发现了个不错的插件，叫 &lt;a href=&quot;https://www.codesmagic.com/mybatis&quot;&gt;Mybatis Plus&lt;/a&gt;，是一个 IntelliJ IDEA 插件，用于协助编写使用MyBatis的程序。&lt;br&gt;插件官网上还给出了使用插件的 &lt;a href=&quot;https://www.youtube.com/watch?v=jLisFKsU52A&amp;amp;list=PLAswK8OvyF9fOyW1iXIuwxgt4FEJHR4B9&quot;&gt;效果视频&lt;/a&gt;，感觉这插件能大大提升开发效率，于是安装它打算试试。&lt;br&gt;不料，安装后发现插件不允许试用，只能先购买后使用。于是我查了一些资料，试着自己处理掉DRM。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://oing9179.github.io/categories/Java/"/>
    
    
      <category term="Java EE" scheme="https://oing9179.github.io/tags/Java-EE/"/>
    
      <category term="Intellij IDEA" scheme="https://oing9179.github.io/tags/Intellij-IDEA/"/>
    
      <category term="CRACK" scheme="https://oing9179.github.io/tags/CRACK/"/>
    
      <category term="Mybatis" scheme="https://oing9179.github.io/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>在 OpenShift 上装 Typecho</title>
    <link href="https://oing9179.github.io/2016/07/Install-Typecho-on-OpenShift/"/>
    <id>https://oing9179.github.io/2016/07/Install-Typecho-on-OpenShift/</id>
    <published>2016-07-18T07:28:00.000Z</published>
    <updated>2017-02-02T09:57:44.080Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://www.openshift.com/images/logos/openshift/Logotype_RH_OpenShift_wLogo_RGB_Black.svg"></p>
<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>因为东西越来越多，感觉光用脑子记已经没法永久记住了，于是搭建个blog。<br>既然是第一篇博文，那就讲讲在OpenShift上搭建Typecho的过程吧。</p>
<a id="more"></a>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ol>
<li>一个OpenShift帐号，免费帐号就够用。</li>
</ol>
<h1 id="开工"><a href="#开工" class="headerlink" title="开工"></a>开工</h1><h2 id="创建-OpenShift-Application"><a href="#创建-OpenShift-Application" class="headerlink" title="创建 OpenShift Application"></a>创建 OpenShift Application</h2><ol>
<li>登录到OpenShift。因为是新的帐号，所以OpenShift会提示你创建一个新的 Application，直接创建就好。</li>
<li>创建Application页面里有许多类型的Application，选择”PHP 5.4”就好。</li>
<li><p>接下来主要要填写的内容包括</p>
<ul>
<li><p>Public URL: 用这个地址访问这个博客</p>
<p>其余的选项看看就好，然后点击”Create Application”，然后去泡一杯茶。<br>创建完成后浏览器会导航到刚创建好的Application的页面。</p>
</li>
</ul>
</li>
<li>因为Typecho要用到数据库，我选择用MySQL数据库。那么，在页面上找到”Enable MySQL 5.5”并点击它，然后直接点击”Add Cartridge”。几秒钟后就添加好MySQL支持了。</li>
</ol>
<p>以上步骤全部完成后，网页上大概应该是这样：</p>
<p><img src="openshift_aplication_creation_finished.jpg" alt="OpenShift Application creation finished."></p>
<p>我又加了个负载平衡功能，我也忘了怎么加的了，不过这些功能都会在当前Application页面上有。</p>
<h2 id="为-OpenShift-帐号添加-ssh-key"><a href="#为-OpenShift-帐号添加-ssh-key" class="headerlink" title="为 OpenShift 帐号添加 ssh key"></a>为 OpenShift 帐号添加 ssh key</h2><p>此步骤是为了稍后安装Typecho时，连接OpenShift所用。</p>
<ol>
<li>在页面上点击 Settings，然后应该像下面这样显示出来:<br><img src="add_ssh_key.jpg" alt="Add SSH key"></li>
<li>用 <code>ssh-keygen</code> 生成一份RSA公私钥，然后把公钥（也就是以 <code>.pub</code> 结尾的文件）的内容直接粘贴到上图右边的文本框里，然后点保存。<blockquote>
<p>注：Windows用户可以用PuTTY的 <code>puttygen.exe</code> 来生成公私钥。</p>
</blockquote>
</li>
</ol>
<h2 id="上传-Typecho-文件"><a href="#上传-Typecho-文件" class="headerlink" title="上传 Typecho 文件"></a>上传 Typecho 文件</h2><ol>
<li>首先到 <a href="https://github.com/typecho/typecho/" target="_blank" rel="external">Typecho on Github</a> 下载一份Typecho备用。</li>
<li><p>执行命令 <code>ssh-add 私钥文件名</code> ，把SSH私钥添加到本地，用来通过SSH登录OpenShift。</p>
<blockquote>
<p>注意：该步骤不适用于Windows，需改用PuTTY或类似的SSH客户端。第3步也是。</p>
</blockquote>
</li>
<li><p>将远程服务器上的仓库clone到本地：<br>如下图，把 <code>Source Code</code> 下面的 <code>ssh://....</code> 复制出来，然后使用下面的命令将远程服务器上的仓库clone到本地：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone ssh://....</div></pre></td></tr></table></figure>
<blockquote>
<p>注意：系统得装有 git.</p>
</blockquote>
<p> <img src="openshift_aplication_creation_finished.jpg" alt="OpenShift Application creation finished."></p>
</li>
<li><p>切换目录到clone下来的仓库里，把之前下载好的Typecho压缩包直接解包到这里，然后执行下面的命令：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git add --all</div><div class="line">git commit -m &quot;Install Typecho.&quot;</div><div class="line">git push</div></pre></td></tr></table></figure>
</li>
<li><p>打开自己的网站（比如本文里就是 <code>https://typecho-*****.rhcloud.com</code>），准备接下来的安装步骤。</p>
<blockquote>
<p>如果打开网页出现 HTTP 50x 错误，稍等几秒再刷新就好了。</p>
</blockquote>
</li>
</ol>
<h2 id="获取-MySQL-地址和端口号"><a href="#获取-MySQL-地址和端口号" class="headerlink" title="获取 MySQL 地址和端口号"></a>获取 MySQL 地址和端口号</h2><p>MySQL的地址和端口号 将会在安装Typecho时候向用户索要。</p>
<blockquote>
<p>注：下面将通过SSH登录OpenShift，Windows用户可使用PuTTY或其他SSH客户端来登录。</p>
</blockquote>
<ol>
<li><p>还是这张图，点击 “Want to log in to your application?”，然后会自动选中 <code>ssh</code> 开头的一段文字，直接复制下来粘贴到终端里然后回车即可。</p>
<blockquote>
<p>若登录失败，用 <code>ssh-add 私钥文件名</code> 添加私钥，然后再重试即可。</p>
</blockquote>
<p> <img src="openshift_aplication_creation_finished.jpg" alt="OpenShift Application creation finished."></p>
</li>
<li><p>执行下面命令来获得MySQL的地址和端口号：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">echo $OPENSHIFT_MYSQL_DB_HOST</div><div class="line">echo $OPENSHIFT_MYSQL_DB_PORT</div></pre></td></tr></table></figure>
<p> 输出结果大概会像下面这样：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; echo $OPENSHIFT_MYSQL_DB_HOST</div><div class="line">blahblahblahblahblahblah-someone.rhcloud.com</div><div class="line">&gt; echo $OPENSHIFT_MYSQL_DB_PORT</div><div class="line">12345</div></pre></td></tr></table></figure>
<p> 第一个输出的一长串字就是地址，第二个输出的数字就是端口号。然后把它们保存下来备用。</p>
</li>
</ol>
<h2 id="安装-Typecho"><a href="#安装-Typecho" class="headerlink" title="安装 Typecho"></a>安装 Typecho</h2><ol>
<li>完成之前的步骤的后，网站已经可以打开了，点击”我准备好了，开始下一步”即可。</li>
<li><p>接下来Typecho索要要一些设定参数，包含如下：</p>
<p> | 参数名             | 怎么填                            |<br> |:——————-|:———————————-|<br> | 数据库适配器       | 不管哪个，只要是MySQL的就行       |<br> | 数据库地址和密码   | 之前的步骤里找到的地址            |<br> | 数据库名           | 在当前Application的页面上可以找到 |<br> | 数据库用户名和密码 | 也在当前Application的页面上       |<br> | 登录密码           | 用来登录网站后台                  |<br> | 邮件地址           | 博文有评论什么的都会发到这个邮箱  |</p>
<p> 其余的没在上面表格里提到的，看看就好。</p>
</li>
<li><p>最后点击 “确认，开始安装”，不出意外的话，应该会提示安装成功。</p>
</li>
</ol>
<p><strong>至此，Typecho就算安装完成了。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://www.openshift.com/images/logos/openshift/Logotype_RH_OpenShift_wLogo_RGB_Black.svg&quot;/&gt;&lt;/p&gt;
&lt;h1 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h1&gt;&lt;p&gt;因为东西越来越多，感觉光用脑子记已经没法永久记住了，于是搭建个blog。&lt;br&gt;既然是第一篇博文，那就讲讲在OpenShift上搭建Typecho的过程吧。&lt;/p&gt;
    
    </summary>
    
      <category term="Typecho" scheme="https://oing9179.github.io/categories/Typecho/"/>
    
    
      <category term="OpenShift" scheme="https://oing9179.github.io/tags/OpenShift/"/>
    
      <category term="Typecho" scheme="https://oing9179.github.io/tags/Typecho/"/>
    
  </entry>
  
</feed>
