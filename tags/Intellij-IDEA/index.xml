<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Intellij IDEA on Hotaru&#39;s Notebook</title>
    <link>https://oing9179.github.io/blog/tags/intellij-idea/</link>
    <description>Recent content in Intellij IDEA on Hotaru&#39;s Notebook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>Copyright © 2022, Hotaru Oyng.</copyright>
    <lastBuildDate>Mon, 08 Aug 2016 13:29:00 +0000</lastBuildDate><atom:link href="https://oing9179.github.io/blog/tags/intellij-idea/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Markdown Navigator(Multi Markdown) for IntelliJ IDEA 破解</title>
      <link>https://oing9179.github.io/blog/posts/2016/august/markdown-navigator-for-intellij-idea-crack/</link>
      <pubDate>Mon, 08 Aug 2016 13:29:00 +0000</pubDate>
      
      <guid>https://oing9179.github.io/blog/posts/2016/august/markdown-navigator-for-intellij-idea-crack/</guid>
      <description>Preface 一直以来我都在寻找一款功能齐全 Markdown 编辑器，目前功能最全的是一款叫做 MarkdownPad 的编辑器，可惜的是它只能运行在Windows上。后来在 IDEA 的插件市场找到了这款Markdown编辑器，叫做 Markdown Navigator(原名为 Multi Markdown)，插件基本功能免费，一些特别的功能（比如 开启Markdown预览）就需要购买许可了，于是干脆把它也破掉吧。
开工 先弄个试用版的许可证激活一下看看 插件原价为 $19.99/yr，直接到 这里 填好相关资料就可以拿到15天的全功能试用许可证了。 然后对 LicenseAgent 类的 getLicenseCode(LicenseRequest licenseRequest)Z 和 isValidActivation()Z 下断点，然后调试该插件。 调试时，打开 被调试的IDEA的菜单栏 -&amp;gt; File -&amp;gt; Settings -&amp;gt; Languages &amp;amp; Frameworks -&amp;gt; Markdown，输入许可证，然后观察LicenseAgent类里的代码执行过程，得到下面的大致激活流程。
大致的激活流程 插件先拿着试用版激活码调用 LicenseAgent.getLicenseCode(LicenseRequest)Z，这会从服务器拿到激活响应以json体现：
{ &amp;#34;status&amp;#34;:&amp;#34;LicenseAgent.STATUS_*&amp;#34;, &amp;#34;message&amp;#34;:&amp;#34;比如激活失败就会用这个来告诉用户.&amp;#34;, &amp;#34;activation_code&amp;#34;:&amp;#34;激活响应信息&amp;#34;, &amp;#34;license_code&amp;#34;:&amp;#34;猜测：服务器要求插件更新许可证用的字段，不一定每次都有.&amp;#34; } 下表描述上面的json里key对应的java字段：
key java field status LicenseAgent.STATUS message LicenseAgent.MESSAGE activation_code LicenseAgent.ACTIVATION_CODE license_code LicenseAgent.LICENSE_CODE 下表描述上面的json里 status 的值对应的java字段：
status java field 含义 ok LicenseAgent.STATUS_OK 激活成功 error LicenseAgent.</description>
    </item>
    
    <item>
      <title>Mybatis Plus for IntelliJ IDEA 破解</title>
      <link>https://oing9179.github.io/blog/posts/2016/july/mybatis-plus-for-intellij-idea-crack/</link>
      <pubDate>Wed, 20 Jul 2016 19:25:00 +0000</pubDate>
      
      <guid>https://oing9179.github.io/blog/posts/2016/july/mybatis-plus-for-intellij-idea-crack/</guid>
      <description>Preface 前天发现了个不错的插件，叫 Mybatis Plus，是一个 IntelliJ IDEA 插件，用于协助编写使用MyBatis的程序。 插件官网上还给出了使用插件的 效果视频，感觉这插件能大大提升开发效率，于是安装它打算试试。 不料，安装后发现插件不允许试用，只能先购买后使用。于是我查了一些资料，试着自己处理掉DRM。
准备工作 按照 引用1 和 引用2 的方法，使用 jbe 直接修改类字节码。不过jbe貌似有bug，每次保存方法以后都会丢失一些信息（比如 保存Method body的字节码后，Method里 堆(Stack)的最大高度之类的信息就丢失了），导致IDEA载入这个插件的时候抛出载入类文件异常。 于是我改用 jd-gui 结合IntelliJ IDEA自带的Decompiler，反编译出原有的java代码，然后手动修改代码使其通过编译检查。 注意：每次修改代码后都进行编译，然后将编译后的类文件替换掉原来的jar包里的类文件，最后重启IDEA看效果和调试输出。
开工 作为切入点的两个类：JavaService 和 JavaUtil 先从 引用1 和 引用2 中所提到的两个类下手：
com.seventh7.mybatis.service.JavaService com.seventh7.mybatis.util.JavaUtil 用IDEA新建一个Java项目，并在 Project Structure 里选择 IntelliJ Platform Plugin SDK。没有这个选项就创建一个即可，如下图：
整个java项目的文件结构如下：
目录 作用 /libs/ 插件的原版jar包和它引用的一些包 /src/main/java/ 按照原版jar包里的包结构创建,用于替换原版jar包里的类. /src/main/resources/ 目前只存放 MANIFEST.MF， 用于记录原版jar包对应的版本号. 图中还有一些上面没有提到过的类，这些类以后会用到。只用这一张图也省得我再做其他的图了。
先从 JavaUtils 类下手好了 先把类反编译出来放到对应的包下面。反编译的类一般都会有些编译错误，导致这些错误的原因包括但不限于：
Java泛型的类型擦除。 类型强制转换时候的 Unchecked 警告。 反编译工具不完善，没能及时更新。 泛型类型擦除这个比较好解决，根据IDE的提示猜出对应的泛型类型就好。猜不出来就先不用泛型，看运行时的异常再决定用什么类型。 以编译通过为基础，尽可能减少可能会导致运行时异常的代码，其他不会导致运行时异常的就不要管它。
按照 引用2 的说明，对 refVaild()Z 做修改。修改前：</description>
    </item>
    
  </channel>
</rss>
