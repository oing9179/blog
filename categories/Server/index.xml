<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Server on Hotaru&#39;s Notebook</title>
    <link>https://oing9179.github.io/blog/categories/server/</link>
    <description>Recent content in Server on Hotaru&#39;s Notebook</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2022, Hotaru Oyng.</copyright>
    <lastBuildDate>Sun, 09 Jun 2019 11:53:39 +0000</lastBuildDate><atom:link href="https://oing9179.github.io/blog/categories/server/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>玩玩真的服务器</title>
      <link>https://oing9179.github.io/blog/posts/2019/june/playing-with-my-new-server/</link>
      <pubDate>Sun, 09 Jun 2019 11:53:39 +0000</pubDate>
      
      <guid>https://oing9179.github.io/blog/posts/2019/june/playing-with-my-new-server/</guid>
      <description>最开始用的是换下来的旧笔记本电脑 Dell Inspiron m5010，装了个 LinuxMint，放在家里当下载姬。
不过那个旧电脑噪音太大了，占用空间也大，于是在 2018 年 8 月我买了个 Up Board 开发板作为新的下载姬。
硬件配置还算行:
 Intel Atom x5-Z8350 (64bit, 4 core, no hyperthreading) 4GB RAM 64 GB eMMC storage USB 2.0 connector * 4 USB 3.0 OTG connector * 1 1 Gbps Ethernet RJ-45 connector HDMI output  完整的配置信息可以看这里: Up Board Specs
购买架式(Rack-mounted)服务器 后来开发板也不够用了
 开发板 USB 接口输出电压很低，带一个机械硬盘都吃力 有时候插满 USB 接口后，甚至会导致电压过低而重启 供电不足还会导致硬盘损伤甚至数据丢失  以前经历过的一次数据丢失已经把我吓怕了，于是这次干脆直接买了个二手 1U 服务器。配置如下:
 Dell PowerEdge R420 Barebone Intel Xeon E5-2470v2(10c, 20t) * 2 不知道什么牌子的内存 单条16G * 4，带 ECC REG PERC H710 RAID卡 不带硬盘 其它一些配件  共 3035 CNY。然后又单独去京东买了点东西:</description>
    </item>
    
    <item>
      <title>使用 SoftEther VPN 搭建私有局域网</title>
      <link>https://oing9179.github.io/blog/posts/2018/july/setup-private-lan-using-softether-vpn/</link>
      <pubDate>Thu, 26 Jul 2018 19:45:46 +0000</pubDate>
      
      <guid>https://oing9179.github.io/blog/posts/2018/july/setup-private-lan-using-softether-vpn/</guid>
      <description>Preface Linux 下并不是所有软件都能设置代理，于是我想起了很久以前用过但没用明白的 SoftEther VPN。
本文将描述 SoftEther VPN（以下简称 sevpn） 在 Linux 服务器和客户端的搭建过程。
准备工作  到 softether.org 下载 Windows 和 Linux 的 client 和 server，共2个exe和2个tgz包 Wine 或运行 Windows 的虚拟机，用来运行 sevpn 的图形界面 GCC 用来编译 Linux 版的 sevpn  sevpn 的编译和安装 编译 Linux 版的可执行文件 前面准备工作里下载的 linux 版 sevpn 只包含源码，需要调用 .install.sh 来编译成可执行文件。
编译完成后，一共有3个文件，{vpnserver 或 vpnclient, vpncmd, hamcore.se2} 是运行 sevpn 的必备文件。
安装管理工具 注： 该工具可以用 Wine 安装和运行。
安装很简单，在 &amp;ldquo;Select Software Components to Install&amp;rdquo; 界面选择 &amp;ldquo;Admin Tools Only&amp;rdquo; 那一项即可。</description>
    </item>
    
    <item>
      <title>为 BIOS 启动的电脑换上 UEFI</title>
      <link>https://oing9179.github.io/blog/posts/2018/july/install-and-boot-os-on-efi-supported-pc/</link>
      <pubDate>Tue, 24 Jul 2018 20:19:46 +0000</pubDate>
      
      <guid>https://oing9179.github.io/blog/posts/2018/july/install-and-boot-os-on-efi-supported-pc/</guid>
      <description>Preface 这几天给某个 Telegram 上的朋友的新电脑装了个 Manjaro，那台电脑使用了 UEFI。
我自己的电脑也支持 UEFI，于是琢磨着给自己的电脑也换上 UEFI 启动。
准备工具  SystemRecuseCd （以下简称 sysrcd）
会用到里面自带的一些工具（sgdisk, GParted, etc.） Windows 10 PE 软件包  syslinux mtools   一个U盘  创建 sysrcd 的 U 盘启动 sysrcd 同时支持 BIOS 和 UEFI 启动，针对不同的启动方式需要进行不同的配置。
注意： 以下任意一种方式都会导致U盘的全部数据丢失。
制作可以通过 BIOS 启动的 sysrcd U盘  复制出一份 sysrcd.iso 文件，因为下面的命令会修改 iso 文件 运行命令 isohybrid sysrcd.iso
（isohybrid 该可执行文件包含在 syslinux 软件包内） 假设 /dev/sdb 是U盘，运行命令 dd if=./sysrcd.iso of=/dev/sdb  制作可以通过 UEFI 启动的 sysrcd U盘  为U盘创建新的分区表，使用 GPT 分区表 为U盘创建一个 1GiB 的 FAT32 分区，假定分区位于 /dev/sdb1 挂载 /dev/sdb1 将 sysrcd.</description>
    </item>
    
    <item>
      <title>部署 Web Application 到 WildFly 13</title>
      <link>https://oing9179.github.io/blog/posts/2018/june/deploy-web-application-to-wildfly-13/</link>
      <pubDate>Sat, 09 Jun 2018 10:18:00 +0000</pubDate>
      
      <guid>https://oing9179.github.io/blog/posts/2018/june/deploy-web-application-to-wildfly-13/</guid>
      <description>Preface 以后可能会在生产环境把 war 部署到 WildFly 里，于是写一篇 blog 记录一下部署方法。
WildFly 开发环境搭建  到 这里 下载 &amp;ldquo;Java EE&amp;lt;版本&amp;gt; Full &amp;amp; Web Distribution&amp;rdquo; 而不是 &amp;ldquo;Servlet-Only Distribution&amp;rdquo;，完整版会带有一个网页版管理界面。 解压缩 编辑 IDEA 的 &amp;ldquo;Run/Debug Configurations&amp;rdquo;
 &amp;ldquo;Add New Configuration (Alt+Insert)&amp;rdquo; -&amp;gt; &amp;ldquo;JBoss Server&amp;rdquo; -&amp;gt; &amp;ldquo;Local&amp;rdquo; 点击图中的 &amp;ldquo;Configure&amp;rdquo;
 &amp;ldquo;Add application server (Alt+Insert)&amp;rdquo; 填入刚解压的 WildFly 的路径，然后 &amp;ldquo;OK&amp;rdquo; 然后点击 OK 就可以做开发和调试了  去掉浏览器 URL 里自带的 context path IDEA 默认情况下会部署到有 http://localhost:8080/&amp;lt;context_path&amp;gt; 的路径里，就像这样:
去掉它的办法也很简单。
 首先先把图中的 context path 删掉 然后到 webapp/WEB-INF/ 下创建文件 jboss-web.</description>
    </item>
    
    <item>
      <title>用 Docker 和 Nginx 搭建 Wekan（Kanban-like todo-list）</title>
      <link>https://oing9179.github.io/blog/posts/2017/august/setup-wekan-the-kanban-like-todo-list-using-docker-nginx/</link>
      <pubDate>Sat, 19 Aug 2017 19:40:20 +0000</pubDate>
      
      <guid>https://oing9179.github.io/blog/posts/2017/august/setup-wekan-the-kanban-like-todo-list-using-docker-nginx/</guid>
      <description>Preface 明明有那么多事情还没做，为何偏偏不断的去查看手机上有哪些新消息呢？那就把还没做事都具化出来，用肉眼看到自己还有哪些事情没做，以此来督促自己啊。 今天上午找了一些 Todo-List 软件，然后发现了这个：wekan/wekan - github.com, 已经有 10k+ 个 Star 了。 想试用的话，打开 wekan.github.io 然后点击 &amp;ldquo;Try on Sandstorm&amp;rdquo;。 下面将介绍具体的搭建过程。
安装 &amp;amp; 配置 MongoDB  执行命令 apt-get install mongodb-server 编辑 /etc/mongodb.conf, 主要修改下面两个参数就够了, 其它的目前用不到.  bind_ip=0.0.0.0: 让 MongoDB 监听所有IP, 方便 Docker 容器访问 port=27017: 这条配置默认是注释掉的, 取消注释即可 防火墙不要对外开放 27017 端口, 免得被别人乱搞 MongoDB   执行命令，允许来自 172.0.0.0/8 IP段的连接，docker 容器一般会被分配到这个地址 ufw allow from 172.0.0.0/8  执行命令重新启动 MongoDB 使上面修改过的设置生效: systemctl restart mongodb.service  安装 &amp;amp; 配置 Wekan Docker Image  安装 / 更新 docker-compose, 参考 这里 创建文件 docker-compose.</description>
    </item>
    
    <item>
      <title>SysRq 键 - Linux 系统崩掉前最后的救命稻草</title>
      <link>https://oing9179.github.io/blog/posts/2017/april/the-magic-sysrq-key/</link>
      <pubDate>Thu, 20 Apr 2017 12:24:48 +0000</pubDate>
      
      <guid>https://oing9179.github.io/blog/posts/2017/april/the-magic-sysrq-key/</guid>
      <description>Preface 今天看英语语法的时候 随意的看了一眼键盘，意外的发现 除了 pause break 和 scroll 这几个键以外，还有个 SysRq。然后查了一下，发现这个键在 Linux 下大有用途：
 In Linux, the kernel can be configured to provide functions for system debugging and crash recovery. This use is known as the “Magic SysRq key”. 在 Linux 下，通过对内核进行配置 可以让它来提供一些功能，比如调试操作系统以及崩溃恢复（Crash Recovery）。这种 SysRq 用法被称之为 &amp;ldquo;Magic SysRq key&amp;rdquo;。 - System request - wikipedia.org
 当 Linux 系统崩溃但还没到 kernel panic 的地步的时候（比如 CPU soft lockup），就可以使用这棵最后的救命稻草。下面我就来介绍一下 SysRq 的使用方法。
sysctl 简单介绍 有些发行版上的 SysRq 功能是关闭的，想开启它的话需要修改配置文件 /etc/sysctl.</description>
    </item>
    
    <item>
      <title>用 Docker &amp; Nginx 搭建自己的账本（Firefly）</title>
      <link>https://oing9179.github.io/blog/posts/2017/april/setup-firefly-the-financial-manager-using-docker-nginx/</link>
      <pubDate>Tue, 18 Apr 2017 07:47:03 +0000</pubDate>
      
      <guid>https://oing9179.github.io/blog/posts/2017/april/setup-firefly-the-financial-manager-using-docker-nginx/</guid>
      <description>Preface &amp;ldquo;我辛辛苦苦挣的钱都去哪儿了&amp;rdquo;，我可不希望以后什么什么时候开始说这种话，于是 搭建个记账软件来记录自己的收支吧。 该软件优点如下：
 资金流向：比如钱都花在哪些类目上了，钱都流向哪些商家了。 资金预算：比如打算每个月花多少钱在饮食上。 分类 &amp;amp; 标签：比如钱都花在那些类目上了。 交易记录：除了收入和支出记录外，如有多个银行账户的话 还能记录不同账户之间的转帐交易 存钱罐（Piggy Banks）：比如想买个手机但是目前没有那么多预算，可以先弄个存钱罐，然后一点一点的往里面存。相当于一个长远的资金预算。 账单：每月水电费之类的。 规则：比如填写支出描述时自动填写预设的支出金额。 报表（Reports）：按月、季、年生成报表，账户余额、资金流向、短期/长期预算、账单 等等。 多货币：软妹币, 美刀, 英镑, 比特币，想用什么就用什么（不支持货币换算，在创建收支记录时候可以手动填写换算前后的金额）。 数据导入导出：导入导出 csv 格式的文件，进一步对资金流向做分析什么的。  目前我能想到的唯一缺点就是：没能和各种银行/支付机构（比如支付婊）进行接口对接，实现自动记录收入支出。 另外，该软件作者表示 &amp;ldquo;不支持自动支付重复性交易&amp;rdquo;，原因是：
 I believe that if you are serious about changing your financial habits, you should be aware of what happens on your accounts. The money you spend and the money you earn. By entering each transaction manually, you will feel what you spend.</description>
    </item>
    
    <item>
      <title>用 Docker 和 Nginx 搭建自己的云服务器（Nextcloud）</title>
      <link>https://oing9179.github.io/blog/posts/2017/march/setup-nextcloud-using-docker-and-nginx/</link>
      <pubDate>Wed, 15 Mar 2017 10:09:00 +0000</pubDate>
      
      <guid>https://oing9179.github.io/blog/posts/2017/march/setup-nextcloud-using-docker-and-nginx/</guid>
      <description>Preface 前些阵子瓷国各种网盘纷纷倒下，我也越来越担心自己的数据安全，没准哪天我的网盘帐号就被&amp;quot;无缘无故&amp;quot;的删掉什么的，于是我就琢磨着搭建个自己的私人网盘。现在这个时代最不缺的就是轮子，随便一搜就有好几个符合要求的自搭建（Self-Hosted）网盘软件：
 Owncloud
不错的候选，不过一些高级特性（比如 Android/iOS app, 团队协作功能, etc.）需要购买订阅，而且还挺贵。 Cozy
同样是不错的候选，但是试用了一会儿发现制作得比较粗糙，大部分功能只是存在而已，不够用。 Nextcloud
Owncloud 的 fork，所有高级特性/企业团队协同功能全免费，还可以自己选择一些 Nextcloud 仓库内的 app 进行安装，Android app 也是免费使用（对应的 iOS app 售价是 $0.99）。  综上，我选择 Nextcloud。
接下来的问题是，我以后必定会在同一台主机内搭建多个网站，但 80 端口只能被一个进程监听。解决这个问题就是使用 Nginx 做反向代理，把入站连接根据域名/路径来转发到主机内的不同端口上。
还有一个问题就是通信安全问题。用 HTTP 这种明文通信协议的话，在通过某些恶意防火墙的时候 很可能会把通信内容给镜像下来 然后拿去分析。解决这个问题也不难，弄个免费 SSL 证书即可，比如 &amp;ldquo;Let&amp;rsquo;s Encrypt&amp;quot;。
注意： 本文使用 Ubuntu 作为服务器系统，部分特性（比如 ufw）不存在于其他 Linux 发行版里 或 需要代替方案（比如用 iptables 代替 ufw）。
安装 Nginx  执行命令来安装 Nginx apt-get install nginx，配置 Nginx 需要在安装 Nextcloud 后进行。 执行命令打开防火墙的 80 端口 ufw allow 80/tcp  安装 / 配置 MariaDB  执行命令来安装 MariaDB apt-get install mariadb-server mariadb-client 执行命令来初步配置 MariaDB mysql_secure_installation，然后按照提示进行操作 root 登录 mysql，执行下面的 SQL 语句，为 Nextcloud 的数据库做准备 -- 创建 nextcloud 数据库 CREATE DATABASE nextcloud CHARACTER SET = utf8 COLLATE = utf8_general_ci; -- 创建 nextcloud 用户 CREATE USER nextcloud IDENTIFIED BY &amp;#39;Passw0rd&amp;#39;; -- 让用户 nextcloud 拥有 nextcloud 数据库的完整权限 GRANT ALL ON nextcloud.</description>
    </item>
    
    <item>
      <title>用 Nginx 转发 V2Ray 的 WebSocket 连接</title>
      <link>https://oing9179.github.io/blog/posts/2017/march/v2ray-as-websocket-proxy-behind-nginx/</link>
      <pubDate>Sat, 11 Mar 2017 21:00:00 +0000</pubDate>
      
      <guid>https://oing9179.github.io/blog/posts/2017/march/v2ray-as-websocket-proxy-behind-nginx/</guid>
      <description>Preface 有些地方网络环境很糟糕，比如：
  防火墙 Drop 掉所有 UDP 包但是 DNS 除外
 其实刚才写完才想到，没准防火墙只允许 53 端口的 UDP 包通过，毕竟这样配置起来简单而且也不怎么影响速度。但后来我想了想 暂时还是算了，因为让 V2Ray 监听 1~1023 端口需要 root 权限。
   除 80 和 443 之类的端口外的数据包传输速率都很低
  既然这样，我就使用 80 或者 443 端口进行通信就是了。于是我看了下 v2ray 官方文档，提供了以下跟 HTTP/HTTPS 有关的选项：
 TCP 并开启 HTTP 伪装 WebSocket  因为我已经用 Nginx 监听 80 口了，所以新的连接必须通过 Nginx 分流到主机内的其他端口。这个 Issue 内提到了 &amp;ldquo;http 伪装没有完全遵守 http 协议，无法被常见的 http server 分流。如果你需要分流，可以使用 websocket 传输方式。&amp;quot;，那我就用 WebSocket 吧。</description>
    </item>
    
    <item>
      <title>在 github.io 上用 Hexo 搭建博客</title>
      <link>https://oing9179.github.io/blog/posts/2017/february/setup-hexo-on-github-io/</link>
      <pubDate>Fri, 03 Feb 2017 10:35:52 +0000</pubDate>
      
      <guid>https://oing9179.github.io/blog/posts/2017/february/setup-hexo-on-github-io/</guid>
      <description>Preface 之前的博客是在 OpenShift 上搭建的 Typecho。但 Typecho 已经有4年没更新了，社区也很不活跃，备份博客数据也很麻烦。所以我干脆直接把博客搬到 GitHub Pages 上，因此也带来了一些便利：
 备份博客只需要把 Markdown 文件连同对应的文件夹打包即可 自带的域名也更有逼格了：https://oing9179.github.io Hexo 社区活跃，出了问题基本都有现成的解决方法 github.io 屏蔽猫抓搜索引擎的爬虫，借此来提高访客的门槛  下面开始介绍博客的迁移过程。
安装 / 配置 Hexo 我看好多人都直接用 &amp;lt;username&amp;gt;.github.io 作为博客地址，我把这个地址预留了下来 留给以后加个首页什么的，然后把博客放在 /blog/ 目录下，根目录下放个 html 把浏览器重定向到 /blog/ 下就行了。
安装 Hexo 参考下面的命令
sudo apt-get install nodejs nodejs-legacy npm install -g hexo-cli 有以下几点注意事项：
 npm install 的时候提示输入密码的话就输入。 因为众所周知的原因，npm 的下载速度很慢，可以为其设置 HTTP 代理： npm config set proxy http://127.0.0.1:8080 npm config set https-proxy http://127.0.0.1:8080 或者使用 taobao 的 npm 镜像，请移步 Taobao npm Mirror.</description>
    </item>
    
    <item>
      <title>使用 bind9 配合 dnscrypt-proxy 搭建自己的无污染的DNS服务器</title>
      <link>https://oing9179.github.io/blog/posts/2016/september/clean-dns-server-setup-using-bind9-and-dnscrypt-proxy/</link>
      <pubDate>Fri, 02 Sep 2016 17:23:00 +0000</pubDate>
      
      <guid>https://oing9179.github.io/blog/posts/2016/september/clean-dns-server-setup-using-bind9-and-dnscrypt-proxy/</guid>
      <description>Preface 因为众所周知的原因，DNS缓存投毒(aka: DNS Spoofing) 的出现是因为DNS查询通信协议的设计缺陷导致的，因为DNS查询协议的设计者当时并没有预料到现在的网络环境这么糟糕。利用这个缺陷可以实现一些特技，比如：
 用浏览器打开Google然后跳转到了Baidu. ISP(网络服务提供商, 比如 奠信 联不通 移不动, etc.)在网页里随意插入广告. 这里没能列举出的一些特技.  为了解决这个问题，我（不知道在什么地方什么时候意外的）发现了个软件叫做 dnscrypt(GitHub项目主页)，相比传统的DNS查询有如下优点：
 与DNS服务器通信过程中使用SSL加密. 可以强制使用TCP，避免因UDP丢包而浪费时间. 有些DNS服务器不会记录用户查了哪些记录，进而也就不会知道用户去了哪些网站. 有些DNS服务器支持DNSSEC，进一步加密/验证DNS查询结果.  不过使用dnscrypt的缺点也是有的：相比ISP提供的DNS，dnscrypt的查询会慢上最少300ms。导致这个问题的原因包括但不限于：
 UDP丢包. 强制使用TCP的话，TCP握手也要很久. SSL握手. 城门口堵车了.  不过这个问题也是可以解决的，那就是在本地搭建一个DNS服务器来缓存dnscrypt的查询结果。 接下来，我就简单的写一下 dnscrypt-proxy 和 bind(用来缓存DNS查询结果) 的安装和配置.
 注1：下面的内容适用于Ubuntu及其衍生Distro，其他Linux Distro可能需要做些修改。 注2：我之所以没用 dnsmasq，是因为无论怎么配置它 它都不缓存向本地请求的记录，但会缓存非本地地址的记录 比如用8.8.8.8它就会缓存。
 dnscrypt-proxy  DNSCrypt 主页
dnscrypt-proxy GitHub 主页
dnscrypt-proxy launchpad.net PPA
 安装 dnscrypt-proxy 执行下面的命令来安装dnscrypt-proxy：
apt-get install dnscrypt-proxy 配置 dnscrypt-proxy 配置dnscrypt-proxy，配置文件在 /etc/default/dnscrypt-proxy：
# What local IP the daemon will listen to, with an optional port.</description>
    </item>
    
    <item>
      <title>在 OpenShift 上装 Typecho</title>
      <link>https://oing9179.github.io/blog/posts/2016/july/install-typecho-on-openshift/</link>
      <pubDate>Mon, 18 Jul 2016 15:28:00 +0000</pubDate>
      
      <guid>https://oing9179.github.io/blog/posts/2016/july/install-typecho-on-openshift/</guid>
      <description>Preface 因为东西越来越多，感觉光用脑子记已经没法永久记住了，于是搭建个blog。 既然是第一篇博文，那就讲讲在OpenShift上搭建Typecho的过程吧。
准备工作  一个OpenShift帐号，免费帐号就够用。  开工 创建 OpenShift Application   登录到OpenShift。因为是新的帐号，所以OpenShift会提示你创建一个新的 Application，直接创建就好。
  创建Application页面里有许多类型的Application，选择&amp;quot;PHP 5.4&amp;quot;就好。
  接下来主要要填写的内容包括
 Public URL: 用这个地址访问这个博客  其余的选项看看就好，然后点击&amp;quot;Create Application&amp;quot;，然后去泡一杯茶。 创建完成后浏览器会导航到刚创建好的Application的页面。
  因为Typecho要用到数据库，我选择用MySQL数据库。那么，在页面上找到&amp;quot;Enable MySQL 5.5&amp;quot;并点击它，然后直接点击&amp;quot;Add Cartridge&amp;quot;。几秒钟后就添加好MySQL支持了。
  以上步骤全部完成后，网页上大概应该是这样：
我又加了个负载平衡功能，我也忘了怎么加的了，不过这些功能都会在当前Application页面上有。
为 OpenShift 帐号添加 ssh key 此步骤是为了稍后安装Typecho时，连接OpenShift所用。
 在页面上点击 Settings，然后应该像下面这样显示出来:  用 ssh-keygen 生成一份RSA公私钥，然后把公钥（也就是以 .pub 结尾的文件）的内容直接粘贴到上图右边的文本框里，然后点保存。   注：Windows用户可以用PuTTY的 puttygen.exe 来生成公私钥。
 上传 Typecho 文件   首先到 Typecho on Github 下载一份Typecho备用。</description>
    </item>
    
  </channel>
</rss>
